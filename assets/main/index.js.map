{"version":3,"sources":["../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/Extensions/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/Extensions/ArrayExtension.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/utils/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/utils/ArrayUtils.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/StateMachine/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/StateMachine/BaseState.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Services/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Services/ClusterSeekerService.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/Boosters/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/Boosters/Column1RocketActivated.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/Boosters/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/Boosters/Column2RocketActivated.ts","../file:/Applications/Cocos/Creator/3.8.3/CocosCreator.app/Contents/Resources/resources/3d/engine/editor/assets/tools/file:/Applications/Cocos/Creator/3.8.3/CocosCreator.app/Contents/Resources/resources/3d/engine/editor/assets/tools/debug-view-runtime-control.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/Injects/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/Injects/dependency-injection.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/Injects/shared/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/Injects/shared/Dictionary.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/EnumGameTool.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Services/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Services/FieldCoordinatesService.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/StateMachine/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/StateMachine/FiniteStateMachine.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/GameBombActivation.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/GameCalculateScore.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/GameCollapseField.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/GameCollectAllClusters.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Services/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Services/GameConfigurationService.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/GameContext.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/GameDropBooster.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/GameField/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/GameField/GameField.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/GameField/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/GameField/GameFieldItem.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/GameFillField.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/GameIdle.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/GameLandDrop.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/GameOver.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/UI/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/UI/GameOverWindow.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/GameRefillGrid.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/GameRemoveCluster.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/GameReshuffleField.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/GameSearchCluster.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/GameSM.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Services/Interfaces/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Services/Interfaces/IClusterSeekerService.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Services/Interfaces/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Services/Interfaces/IGameConfigurationService.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/Observers/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/Observers/IGameContext.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/Observers/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/Observers/IGameStateObserver.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/Observers/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/Observers/IGameStatsObserver.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/Observers/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/Observers/IGameToolObserver.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/Injects/interfaces/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/Injects/interfaces/IGuard.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Services/Interfaces/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Services/Interfaces/ILevelConfiguration.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/Injects/interfaces/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/Injects/interfaces/IMapping.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/Injects/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/Injects/inject.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/Injects/decorators/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/Injects/decorators/injectable.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/Injects/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/Injects/InjectionMapping.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Services/Interfaces/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Services/Interfaces/IPlayerInventoryObserver.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Services/Interfaces/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Services/Interfaces/IPlayerInventoryService.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/Base/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/Base/ISelectedItemData.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/StateMachine/interfaces/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/StateMachine/interfaces/IState.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/StateMachine/interfaces/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/StateMachine/interfaces/ITransition.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Services/Interfaces/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Services/Interfaces/IUIService.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/Injects/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/Injects/Kernel.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Services/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Services/LevelConfiguration.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/Injects/shared/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/Injects/shared/Mapping.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/Boosters/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/Boosters/NukeBombActivated.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/UI/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/UI/Paddings.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Services/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Services/PlayerInventoryService.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/Boosters/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/Boosters/Row1RocketActivated.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/Boosters/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/GameSM/States/Boosters/Row2RocketActivated.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/Base/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Game/Base/SelectedItemData.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/Injects/decorators/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/Injects/decorators/singleton.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/utils/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/utils/TimeoutUtils.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/UI/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/UI/ToolController.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/UI/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/UI/ToolSelector.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/UI/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/UI/ToolSwitcherButton.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/UI/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/UI/ToolToggleButton.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/Injects/type/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/Injects/type/Type.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Services/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Services/UIService.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/Injects/utils/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/Libs/Injects/utils/UniqueUtils.ts","../file:/Users/anton/MyProjects/blast-demo/assets/Scripts/UI/file:/Users/anton/MyProjects/blast-demo/assets/Scripts/UI/UserHud.ts"],"names":["Array","prototype","shuffle2D","array","i","length","j","newI","Math","floor","random","newJ","_ref","_RF","pop","ArrayUtils","removeDuplicateCoordinates","arrays","seen","Set","_iterator","_createForOfIteratorHelperLoose","_step","done","value","coord","key","has","splice","add","removeItem","list","item","removeCount","REMOVE_COUNT_ALL","result","Number","MAX_VALUE","totalRemovedCount","itemIndex","indexOf","removeItemsFromArray","removeItems","getRandomItem","except","concat","tempIndex","removeDuplicates","filter","removeDuplicatesFilter","shuffle","sort","find","predicate","_iterator2","_step2","mergeUnique","a1","a2","res","index","a","values","map","_i","_Object$keys","Object","keys","push","lastIndexOf","getArrayFilledWithRange","start","end","fill","_","idx","getWeightedRandom","options","weights","weight","BaseState","name","_name","_createClass","get","ClusterSeekerService","_dec","singleton","_class","_proto","FindAllClusters","items","minClusterSize","propertyName","allClusters","visited","IsBooster","targetValue","ItemType","cluster","findCluster","CollectCluster","startX","startY","_items$startX","x","y","queue","shift","currentX","currentY","directions","_directions","_directions$_i","dx","dy","newX","newY","Column1RocketActivated","_BaseState","_inheritsLoose","call","STATE_NAME","onEnter","_onEnter","_asyncToGenerator","_regeneratorRuntime","mark","_callee","context","selectedColumn","wrap","_callee$","_context","prev","next","selectedItem","position","currentCluster","stop","_x","apply","arguments","Column2RocketActivated","max","min","ccclass","_decorator","property","DebugViewRuntimeControl","_dec2","Node","_dec3","_dec4","_class2","_Component","_this","_len","args","_key","_initializerDefineProperty","_descriptor","_assertThisInitialized","_descriptor2","_descriptor3","_single","strSingle","strComposite","strMisc","compositeModeToggleList","singleModeToggleList","miscModeToggleList","textComponentList","labelComponentList","textContentList","hideButtonLabel","_currentColorIndex","strColor","color","Color","WHITE","BLACK","RED","GREEN","BLUE","canvas","node","parent","getComponent","Canvas","console","error","uiTransform","UITransform","halfScreenWidth","width","halfScreenHeight","height","miscNode","getChildByName","buttonNode","instantiate","titleNode","newLabel","EnableAllCompositeModeButton","setPosition","setScale","labelComponent","Label","string","overflow","currentRow","newNode","singleModeToggle","textComponent","getComponentInChildren","RichText","on","Toggle","EventType","TOGGLE","toggleSingleMode","Button","CLICK","enableAllCompositeMode","changeColorButton","changeTextColor","HideButton","hideUI","compositeModeToggle","toggleComponent","isChecked","toggleLightingWithAlbedo","toggleCSMColoration","toggleCompositeMode","isTextMatched","textUI","textDescription","tempText","String","findIndex","search","substr","toggle","debugView","director","root","singleMode","enableCompositeMode","lightingWithAlbedo","csmLayerColoration","button","activeValue","active","onLoad","update","deltaTime","Component","_applyDecoratedDescriptor","configurable","enumerable","writable","initializer","classMap","Dictionary","tempId","UniqueUtils","getObjectUniqueId","remove","forEach","callbackfn","tempKey","keysCount","keyIndex","GameTool","FieldCoordinatesService","injectable","_lvlConf","inject","LevelConfigurationService","_widthInPixels","_heightInPixels","offsetX","offsetY","cellWidth","cellHeight","worldToFieldCoordsinates","worldX","worldY","totalWidth","totalHeight","fieldX","fieldY","fieldToWorldCoordsinates","fieldSpawnToWorldCoordsinates","coords","FiniteStateMachine","addStateObserver","observer","_stateObservers","removeStateObserver","notifyGameStateChanged","newState","onStateChanged","states","Map","transitions","currentState","addState","state","set","addTransition","transition","setInitialState","_setInitialState","stateName","_this$currentState$on","_this$currentState","Error","_update","_callee2","_this$currentState$up","_this$currentState2","possibleTransitions","_callee2$","_context2","abrupt","t","from","guardCondition","transitionTo","to","_transitionTo","_callee3","_this$currentState3","_this$currentState$on2","_this$currentState4","_callee3$","_context3","onExit","_x2","getCurrentState","_this$currentState$na","_this$currentState5","GameBombActivation","_inventory","PlayerInventoryService","bombRadius","getAmount","currentTool","skipMove","SELECTOR","removeAmount","GameCalculateScore","gameMoves","gameScore","lvlConf","paytable","GameCollapseField","_coordinatesService","movingItems","above","cords","moveToPosition","Promise","all","isMovingItems","GameCollectAllClusters","_clusterSeeker","conf","gameConf","remainClusters","GameFieldItem","COMPONENT_NAME","shuffleCounter","GameConfigurationService","_reshuffles","_minClusterSize","_startPointsAmount","GameContext","_itemPrefabs","_dropPrefabs","_itemsPool","_items","_dropsPool","_gameNode","_gameConf","_selectedItem","_droppedItems","_currentCluster","_isMovingItems","_remainClusters","_shuffleCounter","_onClickedItemCb","_gameScore","_gameMoves","_currentTool","_observers","_toolObservers","_skipMove","addToolObserver","removeToolObserver","addObserver","removeObserver","notifyScoreChanged","newScore","onScoreChanged","notifyMovesChanged","newMoves","onMovesChanged","notifyToolChanged","newTool","onToolChanged","maxMoves","targetScore","reshuffles","GameDropBooster","clusterLength","drops","maxDropKey","numKey","drop","dropItem","dropPrefab","itemData","parseInt","getCachedDrop","dropPrefabs","CLICKED_EVENT","clickedItem","onClickedItemCb","SelectedItemData","droppedItems","dropsPool","_onExit","GameField","type","Prefab","tooltip","_dec5","_dec6","_dec7","CCFloat","_dec8","Paddings","visible","serializable","_dec9","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_uiService","UIService","_stateMachine","GameStateMachine","_start","setItems","itemPrefabs","setDrops","targetNode","bind","resetSize","scaleTargets","targetPaddings","maskTarget","maskPaddings","dt","CCString","CCBoolean","_class3","_isInteractable","_moveToPosition","duration","delay","_this2","resolve","tween","Vec3","_x3","_x4","TOUCH_END","onClick","event","location","getUILocation","transform","nodePos","convertToNodeSpaceAR","size","contentSize","abs","emit","GameFillField","rootNode","poolItem","_item","_item2","itemComponent","initialreshuffle","_i2","_j","gameNode","startPointsAmount","createItem","itemsPool","addChild","subscribeClickEvents","GameIdle","SELECTED_EVENT","onItemSelected","off","GameLandDrop","replaceItem","currentItem","removeFromParent","GameOver","GameOverWindow","_gameContext","onEnable","_pointsLbl","toString","_movesLbl","GameRefillGrid","itemPool","spawnCords","GameRemoveCluster","pool","_loop","columnIndex","_loop$","row","delegateYield","GameReshuffleField","GameSearchCluster","setupStates","_setupStates","NukeBombActivated","Row1RocketActivated","Row2RocketActivated","setupTransitions","_setupTransitions","needReshuffle","canReshuffle","BOMB_1","BOMB_2","NUKE_BOMB","ROW_ROCKET_1","ROW_ROCKET_2","COL_ROCKET_1","COL_ROCKET_2","outOfMoves","pointTargetReached","_bind","onItemClicked","unbind","data","Vec2","kernel","Kernel","constructor","target","InjectionMapping","_Mapping","classesMap","initialConstructor","instance","isSingleton","_instanceResultConstructor","_isForceCreation","getInstance","createInstance","getConstructor","_construct","hasInstance","destroyInstance","asSingleton","instanceConstructor","newThis","existentialType","other","warn","isForceCreation","forceCreation","oldThis","Mapping","getBinding","mapping","activate","injectionsList","_width","_height","_cellWidth","_cellHeight","_paytable","_drops","_maxMoves","_targetScore","_bombRadius","guards","executeOnce","isOnce","once","withGuards","executionAllowedByGuards","guard","createFilter","filterFields","propertiesInMapping","extractAllProperties","hasOwnProperty","left","right","top","bottom","clone","paddings","_left","_right","_top","_bottom","amount","tool","onInventoryChanged","setAmount","notifyObservers","addAmount","currentAmount","selectedRow","_position","TimeoutUtils","wait","timeOut","setTimeout","handler","timeout","id","getId","move","time","by","checkEnd","then","timers","isActive","undefined","clearTimeout","clearById","setInterval","_len2","_key2","getIntervalTween","clearInterval","isNaN","tl","maxInteger","MAX_SAFE_INTEGER","pow","lastId","timerId","ToolController","onBombClick","onBigBombClick","ToolSelector","ToolToggleButton","_bombToggle","setText","_bigBombToggle","onBombToggled","isOn","onBigBombToggled","ToolSwitcherButton","_ToolToggleButton","toggleValue","Sprite","EventHandler","_playerInventory","text","label","_isOn","_tool","updateVisuals","onTouchEnd","onDestroy","_isEnabled","onSprite","offSprite","notifyToggleObservers","emitEvents","onToggleChanged","_resetSize","pixelWidth","pixelHeight","targetTransform","setContentSize","object","UNIQUE_ID_PROP_NAME","prevGlobalUniqueId","globalUniqueId","UserHud","ProgressBar","updateScore","updateMoves","gameOverWindow","score","scoreLabel","scoreProgress","progress","moves","movesLabel"],"mappings":"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","file":"all.js","sourcesContent":["declare global {\n    interface Array<T> {\n        shuffle2D(): T[][];\n    }\n}\n\nArray.prototype.shuffle2D = function<T>(): T[][] {\n    const array = this as T[][];\n    for (let i = 0; i < array.length; i++) {\n        for (let j = 0; j < array[i].length; j++) {\n            const newI = Math.floor(Math.random() * array.length);\n            const newJ = Math.floor(Math.random() * array[i].length);\n            [array[i][j], array[newI][newJ]] = [array[newI][newJ], array[i][j]];\n        }\n    }\n    return array;\n};\n\nexport {};","\nexport interface IAssociativeArray<T> {\n    [key: string]: T;\n}\n\nexport class ArrayUtils {\n    protected static REMOVE_COUNT_ALL: number = -1;\n\n    public static removeDuplicateCoordinates(arrays: number[][][]): void {\n        const seen = new Set<string>();\n\n        for (const array of arrays) {\n            for (let i = array.length - 1; i >= 0; i--) {\n                const coord = array[i];\n                const key = `${coord[0]},${coord[1]}`;\n\n                if (seen.has(key)) {\n                    array.splice(i, 1);\n                } else {\n                    seen.add(key);\n                }\n            }\n        }\n    }\n\n    public static removeItem(list: any[], item: any, removeCount: number = ArrayUtils.REMOVE_COUNT_ALL): boolean {\n        let result: boolean = false;\n\n        if (removeCount === ArrayUtils.REMOVE_COUNT_ALL) {\n            removeCount = Number.MAX_VALUE;\n        }\n\n        let totalRemovedCount: number = 0;\n        let itemIndex: number = list.indexOf(item);\n        while (itemIndex !== -1 && totalRemovedCount < removeCount) {\n            list.splice(itemIndex, 1);\n\n            itemIndex = list.indexOf(item, itemIndex);\n            totalRemovedCount++;\n\n            result = true;\n        }\n\n        return result;\n    }\n\n    public static removeItemsFromArray<T>(list: T[], removeItems: T[]): void {\n        let item: T;\n        for (let itemIndex: number = 0; itemIndex < removeItems.length; itemIndex++) {\n            item = removeItems[itemIndex];\n            ArrayUtils.removeItem(list, item);\n        }\n    }\n\n    public static getRandomItem<T>(list: T[], except?: T[]): T {\n        let result: T;\n\n        if (list && list.length > 0) {\n\n            if (except) {\n                list = list.concat();\n                ArrayUtils.removeItemsFromArray(list, except);\n            }\n\n            const tempIndex: number = Math.floor(Math.random() * list.length);\n            result = list[tempIndex];\n        }\n\n        return result;\n    }\n\n    public static removeDuplicates(array: any[]): any[] {\n        return array.filter(ArrayUtils.removeDuplicatesFilter);\n    }\n\n    public static shuffle(array: any[]): any[] {\n        return array.sort(() => Math.random() - 0.5);\n    }\n\n    static find<T>(array: Array<T>, predicate: (item: T) => boolean): T {\n        for (const item of array) {\n            if (predicate(item)) {\n                return item;\n            }\n        }\n        return null;\n    }\n\n    static mergeUnique<T>(a1: T[], a2: T[]): T[] {\n        const res: T[] = a1.filter((value: T, index: number, a: T[]): boolean => a2.indexOf(value) < 0);\n        return res.concat(a2);\n    }\n\n    static values<T>(map: IAssociativeArray<T>): T[] {\n        const list: T[] = [];\n\n        for (const key of Object.keys(map)) {\n            list.push(map[key]);\n        }\n        return list;\n    }\n\n    protected static removeDuplicatesFilter(item: any, index: number, array: any[]): boolean {\n        return (index === 0) ? true : array.lastIndexOf(item, index - 1) === -1;\n    }\n\n    public static getArrayFilledWithRange(start: number, end: number): number[] {\n        return Array(end - start + 1).fill(0).map((_, idx) => start + idx);\n    }\n\n    public static getWeightedRandom(options: {item: number, weight: number}[]): number {\n        let i;\n        const weights: number[] = [];\n        for (i = 0; i < options.length; i++) {\n            weights[i] = options[i].weight + (weights[i - 1] || 0);\n        }\n        const random: number = Math.random() * weights[weights.length - 1];\n        for (i = 0; i < weights.length; i++) {\n            if (weights[i] > random) {\n                break;\n            }\n        }\n        return options[i].item;\n    }\n}\n","/**\n * @file BaseState.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-04\n */\n\nimport { IState } from './interfaces/IState';\n\n/**\n * Abstract base class for implementing state pattern in the game.\n * Provides basic functionality for state management and transitions.\n * @template TContext The type of context object that contains shared state data\n */\nexport abstract class BaseState<TContext> implements IState<TContext> {\n    /**\n     * The name of the state. Used for identification and debugging.\n     */\n    private readonly _name: string;\n\n    constructor(name: string) {\n        this._name = name;\n    }\n\n    /**\n     * The name of the state. Used for identification and debugging.\n     */\n    public get name(): string {\n        return this._name;\n    }\n\n    /**\n     * Called when entering this state.\n     * Override this method to perform initialization logic.\n     * @param context The shared context object\n     */\n    public async onEnter?(context: TContext): Promise<void>;\n\n    /**\n     * Called when exiting this state.\n     * Override this method to perform cleanup logic.\n     * @param context The shared context object\n     */\n    public async onExit?(context: TContext): Promise<void>;\n\n    /**\n     * Called to update the state's logic.\n     * Override this method to implement state-specific behavior.\n     * @param context The shared context object\n     */\n    public async update?(context: TContext): Promise<void>;\n\n    /**\n     * Called to check if this state can transition to another state.\n     * Override this method to implement custom transition logic.\n     * @param context The shared context object\n     * @returns True if the state can transition, false otherwise\n     */\n    public async canExit?(context: TContext): Promise<boolean>;\n}\n","/**\n * @file ClusterSeekerService.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-05\n * \n * Service responsible for finding clusters of matching items in the game field.\n * A cluster is a group of adjacent items that share the same property value.\n * The service uses a flood-fill algorithm to identify connected components.\n */\n\nimport { singleton } from \"../Libs/Injects/decorators/singleton\";\nimport { GameFieldItem } from \"../GameField/GameFieldItem\";\nimport { IClusterSeekerService } from \"./Interfaces/IClusterSeekerService\";\n\n/**\n * Service responsible for finding clusters of matching items in the game field.\n * A cluster is a group of adjacent items of the same type. This service provides\n * methods to find such clusters around a selected item or across the entire field.\n */\n@singleton()\nexport class ClusterSeekerService implements IClusterSeekerService {\n\n    /**\n     * Finds all valid clusters in the game field by scanning each position\n     * @param items 2D array of game field items to search in\n     * @param minClusterSize Minimum number of connected items required for a valid cluster\n     * @param propertyName Property to match items by (e.g., 'color', 'type')\n     * @returns Array of clusters, where each cluster is an array of connected GameFieldItems\n     */\n    public FindAllClusters(items: GameFieldItem[][], minClusterSize: number, propertyName: string): GameFieldItem[][] {\n        const allClusters: GameFieldItem[][] = [];\n        const visited: boolean[][] = Array(items.length).fill(null).map(() => Array(items[0].length).fill(false));\n        for (let i = 0; i < items.length; i++) {\n            for (let j = 0; j < items[i].length; j++) {\n                if (!visited[i][j] && items[i][j]) {\n                    if (items[i][j].IsBooster){\n                        allClusters.push([items[i][j]]);\n                        continue;\n                    }\n                    const targetValue = items[i][j].ItemType;\n                    const cluster = this.findCluster(items, visited, i, j, targetValue);                    \n                    if (cluster.length >= minClusterSize) {\n                        allClusters.push(cluster);\n\n                    }\n                }\n            }\n        }\n        return allClusters;\n    }\n\n    /**\n     * Collects a cluster starting from a specific position using flood-fill algorithm\n     * @param items 2D array of game field items to search in\n     * @param minClusterSize Minimum number of connected items required for a valid cluster\n     * @param startX Starting X coordinate for cluster search\n     * @param startY Starting Y coordinate for cluster search\n     * @param propertyName Property to match items by (e.g., 'color', 'type')\n     * @returns Array of connected GameFieldItems forming a cluster, or empty array if cluster is too small\n     */\n    public CollectCluster(items: GameFieldItem[][], minClusterSize: number, startX: number, startY: number, propertyName: string): GameFieldItem[] {\n        const visited: boolean[][] = Array(items.length).fill(null).map(() => Array(items[0].length).fill(false));\n        \n        if (!items[startX]?.[startY]) {\n            return [];\n        }\n\n        const targetValue = items[startX][startY][propertyName];\n        \n        const cluster = this.findCluster(items, visited, startX, startY, targetValue);\n        \n        return cluster.length >= minClusterSize ? cluster : [];\n    }\n\n    /**\n     * Helper method that performs recursive flood-fill to find connected items\n     * @param items 2D array of game field items\n     * @param visited Set tracking visited positions to avoid cycles\n     * @param x Current X coordinate being checked\n     * @param y Current Y coordinate being checked\n     * @param targetValue Value to match against (from propertyName)\n     * @returns Array of GameFieldItems that form a connected cluster\n     * @private\n     */\n    private findCluster(\n        items: GameFieldItem[][], \n        visited: boolean[][], \n        x: number, \n        y: number, \n        targetValue: string\n    ): GameFieldItem[] {\n        const cluster: GameFieldItem[] = [];\n        const queue: [number, number][] = [[x, y]];\n        \n        while (queue.length > 0) {\n            const [currentX, currentY] = queue.shift()!;\n\n            if (\n                currentX < 0 || currentX >= items.length ||\n                currentY < 0 || currentY >= items[0].length ||\n                visited[currentX][currentY] ||\n                !items[currentX][currentY] ||\n                items[currentX][currentY].ItemType !== targetValue\n            ) {\n                continue;\n            }\n\n            visited[currentX][currentY] = true;\n            cluster.push(items[currentX][currentY]);\n\n            const directions = [[0, 1], [1, 0], [0, -1], [-1, 0]];\n            for (const [dx, dy] of directions) {\n                const newX = currentX + dx;\n                const newY = currentY + dy;\n                if (\n                    newX >= 0 && newX < items.length &&\n                    newY >= 0 && newY < items[0].length &&\n                    !visited[newX][newY] &&\n                    items[newX][newY] &&\n                    items[newX][newY].ItemType === targetValue\n                ) {\n                    queue.push([newX, newY]);\n                }\n            }\n        }\n        return cluster;\n    }\n}","/**\n * @file Column1RocketActivated.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-05\n */\n\nimport { GameFieldItem } from \"../../../../GameField/GameFieldItem\";\nimport { BaseState } from \"../../../../Libs/StateMachine/BaseState\";\nimport { GameContext } from \"../../GameContext\";\n\n/**\n * Represents the state when a single-column rocket booster is activated.\n * This booster clears all items in a single column of the game field.\n */\nexport class Column1RocketActivated extends BaseState<GameContext> {\n    public static readonly STATE_NAME: string = 'Column1RocketActivated';\n\n    constructor() {\n        super(Column1RocketActivated.STATE_NAME);\n    }\n\n    /**\n     * Handles entering the column rocket activation state.\n     * Collects all items in the selected column for removal.\n     * @param context - The game context\n     */\n    public async onEnter(context: GameContext): Promise<void> {\n        const items = context.items;\n        const cluster: GameFieldItem[] = [];\n        \n        const selectedColumn = context.selectedItem.position.x;\n        for (let j = 0; j < items[0].length; j++) {\n            if (items[selectedColumn][j]) {\n                cluster.push(items[selectedColumn][j]);\n            }\n        }\n        \n        context.currentCluster = cluster;\n    }\n}   ","/**\n * @file Column2RocketActivated.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-05\n */\n\nimport { GameFieldItem } from \"../../../../GameField/GameFieldItem\";\nimport { BaseState } from \"../../../../Libs/StateMachine/BaseState\";\nimport { GameContext } from \"../../GameContext\";\n\n/**\n * Represents the state when a double-column rocket booster is activated.\n * This booster clears all items in two adjacent columns of the game field.\n */\nexport class Column2RocketActivated extends BaseState<GameContext> {\n    public static readonly STATE_NAME: string = 'Column2RocketActivated';\n\n    constructor() {\n        super(Column2RocketActivated.STATE_NAME);\n    }\n\n    /**\n     * Handles entering the double-column rocket activation state.\n     * Collects all items in the selected column and an adjacent column for removal.\n     * @param context - The game context\n     */\n    public async onEnter(context: GameContext): Promise<void> {\n        const items = context.items;\n        const cluster: GameFieldItem[] = [];\n        \n        const selectedColumn = context.selectedItem.position.x;\n        for (let j = 0; j < items[0].length; j++) {\n            for (let i = Math.max(0, selectedColumn - 1); i <= Math.min(selectedColumn + 1, items.length - 1); i++) {\n                if (items[i][j]) {\n                    cluster.push(items[i][j]);\n                }\n            }\n        }\n        context.currentCluster = cluster;\n    }\n}   ","import { Color, Canvas, UITransform, instantiate, math, Toggle, TextureCube, _decorator, Component, Button, labelAssembler, game, director, Node, Scene, renderer, CameraComponent, Label, ForwardPipeline, RichText } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('internal.DebugViewRuntimeControl')\nexport class DebugViewRuntimeControl extends Component {\n    @property(Node)\n    compositeModeToggle: Node | null = null;\n    @property(Node)\n    singleModeToggle: Node | null = null;\n    @property(Node)\n    EnableAllCompositeModeButton: Node | null = null;\n\t_single: number = 0;\n\n    private strSingle: string[] = [\n        'No Single Debug',\n        'Vertex Color',\n        'Vertex Normal',\n        'Vertex Tangent',\n        'World Position',\n        'Vertex Mirror',\n        'Face Side',\n        'UV0',\n        'UV1',\n        'UV Lightmap',\n        'Project Depth',\n        'Linear Depth',\n\n        'Fragment Normal',\n        'Fragment Tangent',\n        'Fragment Binormal',\n        'Base Color',\n        'Diffuse Color',\n        'Specular Color',\n        'Transparency',\n        'Metallic',\n        'Roughness',\n        'Specular Intensity',\n        'IOR',\n\n        'Direct Diffuse',\n        'Direct Specular',\n        'Direct All',\n        'Env Diffuse',\n        'Env Specular',\n        'Env All',\n        'Emissive',\n        'Light Map',\n        'Shadow',\n        'AO',\n\n        'Fresnel',\n        'Direct Transmit Diffuse',\n        'Direct Transmit Specular',\n        'Env Transmit Diffuse',\n        'Env Transmit Specular',\n        'Transmit All',\n        'Direct Internal Specular',\n        'Env Internal Specular',\n        'Internal All',\n\n        'Fog',\n    ];\n    private strComposite: string[] = [\n        'Direct Diffuse',\n        'Direct Specular',\n        'Env Diffuse',\n        'Env Specular',\n        'Emissive',\n        'Light Map',\n        'Shadow',\n        'AO',\n\n        'Normal Map',\n        'Fog',\n\n        'Tone Mapping',\n        'Gamma Correction',\n\n        'Fresnel',\n        'Transmit Diffuse',\n        'Transmit Specular',\n        'Internal Specular',\n        'TT',\n    ];\n    private strMisc: string[] = [\n        'CSM Layer Coloration',\n        'Lighting With Albedo',\n    ];\n\n    private compositeModeToggleList: Node[] = [];\n    private singleModeToggleList: Node[] = [];\n    private miscModeToggleList: Node[] = [];\n    private textComponentList: RichText[] = [];\n    private labelComponentList: Label[] = [];\n    private textContentList: string[] = [];\n    private hideButtonLabel: Label;\n    start() {\n        // get canvas resolution\n        const canvas = this.node.parent.getComponent(Canvas);\n        if (!canvas) {\n            console.error('debug-view-runtime-control should be child of Canvas');\n            return;\n        }\n\n        const uiTransform = this.node.parent.getComponent(UITransform);\n        const halfScreenWidth = uiTransform.width * 0.5;\n        const halfScreenHeight = uiTransform.height * 0.5;\n\n        let x = -halfScreenWidth + halfScreenWidth * 0.1, y = halfScreenHeight - halfScreenHeight * 0.1;\n        const width = 200, height = 20;\n\n        // new nodes\n        const miscNode = this.node.getChildByName('MiscMode');\n        const buttonNode = instantiate(miscNode);\n        buttonNode.parent = this.node;\n        buttonNode.name = 'Buttons';\n        const titleNode = instantiate(miscNode);\n        titleNode.parent = this.node;\n        titleNode.name = 'Titles';\n\n        // title\n        for (let i = 0; i < 2; i++) {\n            const newLabel = instantiate(this.EnableAllCompositeModeButton.getChildByName('Label'));\n            newLabel.setPosition(x + (i > 0 ? 50 + width * 2 : 150), y, 0.0);\n            newLabel.setScale(0.75, 0.75, 0.75);\n            newLabel.parent = titleNode;\n            const labelComponent = newLabel.getComponent(Label);\n            labelComponent.string = i ? '----------Composite Mode----------' : '----------Single Mode----------';\n            labelComponent.color = Color.WHITE;\n            labelComponent.overflow = 0;\n            this.labelComponentList[this.labelComponentList.length] = labelComponent;\n        }\n\n        y -= height;\n        // single\n        let currentRow = 0;\n        for (let i = 0; i < this.strSingle.length; i++, currentRow++) {\n            if (i === this.strSingle.length >> 1) {\n                x += width;\n                currentRow = 0;\n            }\n            const newNode = i ? instantiate(this.singleModeToggle) : this.singleModeToggle;\n            newNode.setPosition(x, y - height * currentRow, 0.0);\n            newNode.setScale(0.5, 0.5, 0.5);\n            newNode.parent = this.singleModeToggle.parent;\n\n            const textComponent = newNode.getComponentInChildren(RichText);\n            textComponent.string = this.strSingle[i];\n            this.textComponentList[this.textComponentList.length] = textComponent;\n            this.textContentList[this.textContentList.length] = textComponent.string;\n\n            newNode.on(Toggle.EventType.TOGGLE, this.toggleSingleMode, this);\n\n            this.singleModeToggleList[i] = newNode;\n        }\n\n        x += width;\n        // buttons\n        this.EnableAllCompositeModeButton.setPosition(x + 15, y, 0.0);\n        this.EnableAllCompositeModeButton.setScale(0.5, 0.5, 0.5);\n        this.EnableAllCompositeModeButton.on(Button.EventType.CLICK, this.enableAllCompositeMode, this);\n        this.EnableAllCompositeModeButton.parent = buttonNode;\n        let labelComponent = this.EnableAllCompositeModeButton.getComponentInChildren(Label);\n        this.labelComponentList[this.labelComponentList.length] = labelComponent;\n\n        const changeColorButton = instantiate(this.EnableAllCompositeModeButton);\n        changeColorButton.setPosition(x + 90, y, 0.0);\n        changeColorButton.setScale(0.5, 0.5, 0.5);\n        changeColorButton.on(Button.EventType.CLICK, this.changeTextColor, this);\n        changeColorButton.parent = buttonNode;\n        labelComponent = changeColorButton.getComponentInChildren(Label);\n        labelComponent.string = 'TextColor';\n        this.labelComponentList[this.labelComponentList.length] = labelComponent;\n\n        const HideButton = instantiate(this.EnableAllCompositeModeButton);\n        HideButton.setPosition(x + 200, y, 0.0);\n        HideButton.setScale(0.5, 0.5, 0.5);\n        HideButton.on(Button.EventType.CLICK, this.hideUI, this);\n        HideButton.parent = this.node.parent;\n        labelComponent = HideButton.getComponentInChildren(Label);\n        labelComponent.string = 'Hide UI';\n        this.labelComponentList[this.labelComponentList.length] = labelComponent;\n        this.hideButtonLabel = labelComponent;\n\n        // misc\n        y -= 40;\n        for (let i = 0; i < this.strMisc.length; i++) {\n            const newNode = instantiate(this.compositeModeToggle);\n            newNode.setPosition(x, y - height * i, 0.0);\n            newNode.setScale(0.5, 0.5, 0.5);\n            newNode.parent = miscNode;\n\n            const textComponent = newNode.getComponentInChildren(RichText);\n            textComponent.string = this.strMisc[i];\n            this.textComponentList[this.textComponentList.length] = textComponent;\n            this.textContentList[this.textContentList.length] = textComponent.string;\n\n            const toggleComponent = newNode.getComponent(Toggle);\n            toggleComponent.isChecked = i ? true : false;\n            newNode.on(Toggle.EventType.TOGGLE, i ? this.toggleLightingWithAlbedo : this.toggleCSMColoration, this);\n            this.miscModeToggleList[i] = newNode;\n        }\n\n        // composite\n        y -= 150;\n        for (let i = 0; i < this.strComposite.length; i++) {\n            const newNode = i ? instantiate(this.compositeModeToggle) : this.compositeModeToggle;\n            newNode.setPosition(x, y - height * i, 0.0);\n            newNode.setScale(0.5, 0.5, 0.5);\n            newNode.parent = this.compositeModeToggle.parent;\n\n            const textComponent = newNode.getComponentInChildren(RichText);\n            textComponent.string = this.strComposite[i];\n            this.textComponentList[this.textComponentList.length] = textComponent;\n            this.textContentList[this.textContentList.length] = textComponent.string;\n\n            newNode.on(Toggle.EventType.TOGGLE, this.toggleCompositeMode, this);\n\n            this.compositeModeToggleList[i] = newNode;\n        }\n    }\n\n    isTextMatched(textUI, textDescription) : boolean {\n        let tempText = new String(textUI);\n        const findIndex = tempText.search('>');\n        if (findIndex === -1) {\n            return textUI === textDescription;\n        } else {\n            tempText = tempText.substr(findIndex + 1);\n            tempText = tempText.substr(0, tempText.search('<'));\n            return tempText === textDescription;\n        }\n    }\n    toggleSingleMode(toggle: Toggle) {\n        const debugView = director.root!.debugView;\n        const textComponent = toggle.getComponentInChildren(RichText);\n        for (let i = 0; i < this.strSingle.length; i++) {\n            if (this.isTextMatched(textComponent.string, this.strSingle[i])) {\n                debugView.singleMode = i;\n            }\n        }\n    }\n    toggleCompositeMode(toggle: Toggle) {\n        const debugView = director.root!.debugView;\n        const textComponent = toggle.getComponentInChildren(RichText);\n        for (let i = 0; i < this.strComposite.length; i++) {\n            if (this.isTextMatched(textComponent.string, this.strComposite[i])) {\n                debugView.enableCompositeMode(i, toggle.isChecked);\n            }\n        }\n    }\n    toggleLightingWithAlbedo(toggle: Toggle) {\n        const debugView = director.root!.debugView;\n        debugView.lightingWithAlbedo = toggle.isChecked;\n    }\n    toggleCSMColoration(toggle: Toggle) {\n        const debugView = director.root!.debugView;\n        debugView.csmLayerColoration = toggle.isChecked;\n    }\n    enableAllCompositeMode(button: Button) {\n        const debugView = director.root!.debugView;\n        debugView.enableAllCompositeMode(true);\n        for (let i = 0; i < this.compositeModeToggleList.length; i++) {\n            const toggleComponent = this.compositeModeToggleList[i].getComponent(Toggle);\n            toggleComponent.isChecked = true;\n        }\n\n        let toggleComponent = this.miscModeToggleList[0].getComponent(Toggle);\n        toggleComponent.isChecked = false;\n        debugView.csmLayerColoration = false;\n        toggleComponent = this.miscModeToggleList[1].getComponent(Toggle);\n        toggleComponent.isChecked = true;\n        debugView.lightingWithAlbedo = true;\n    }\n    hideUI(button: Button) {\n        const titleNode = this.node.getChildByName('Titles');\n        const activeValue = !titleNode.active;\n        this.singleModeToggleList[0].parent.active = activeValue;\n        this.miscModeToggleList[0].parent.active = activeValue;\n        this.compositeModeToggleList[0].parent.active = activeValue;\n        this.EnableAllCompositeModeButton.parent.active = activeValue;\n        titleNode.active = activeValue;\n        this.hideButtonLabel.string = activeValue ? 'Hide UI' : 'Show UI';\n    }\n\n    private _currentColorIndex = 0;\n    private strColor: string[] = [\n        '<color=#ffffff>',\n        '<color=#000000>',\n        '<color=#ff0000>',\n        '<color=#00ff00>',\n        '<color=#0000ff>',\n    ];\n    private color: Color[] = [\n        Color.WHITE,\n        Color.BLACK,\n        Color.RED,\n        Color.GREEN,\n        Color.BLUE,\n    ];\n    changeTextColor(button: Button) {\n        this._currentColorIndex++;\n        if (this._currentColorIndex >= this.strColor.length) {\n            this._currentColorIndex = 0;\n        }\n        for (let i = 0; i < this.textComponentList.length; i++) {\n            this.textComponentList[i].string = this.strColor[this._currentColorIndex] + this.textContentList[i] + '</color>';\n        }\n        for (let i = 0; i < this.labelComponentList.length; i++) {\n            this.labelComponentList[i].color = this.color[this._currentColorIndex];\n        }\n    }\n\n    onLoad() {\n    }\n    update(deltaTime: number) {\n    }\n}\n","/**\n * @file dependency-injection.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-02\n */\n\nimport {InjectionMapping, KernelClassesMap} from \"./InjectionMapping\";\nimport {IInjectable} from \"./interfaces/IInjectable\";\nimport {Class} from \"./type/Type\";\nimport {Dictionary} from \"./shared/Dictionary\";\n\nexport const classMap: KernelClassesMap = new Dictionary<Class<IInjectable>, InjectionMapping<IInjectable>>();","/**\n * @file Dictionary.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-02\n */\n\nimport {UniqueUtils} from \"../utils/UniqueUtils\";\nimport {IAssociativeArray} from \"../../utils/ArrayUtils\";\n\nexport class Dictionary<KeyType extends object, ItemType> {\n    protected map: IAssociativeArray<ItemType> = {};\n\n    public get(key: KeyType): ItemType {\n        const tempId: string = UniqueUtils.getObjectUniqueId(key);\n        return this.map[tempId];\n    }\n\n    public add(key: KeyType, item: ItemType): void {\n        const tempId: string = UniqueUtils.getObjectUniqueId(key);\n        this.map[tempId] = item;\n    }\n\n    public remove(key: KeyType): void {\n        const tempId: string = UniqueUtils.getObjectUniqueId(key);\n        delete this.map[tempId];\n    }\n\n    public forEach(callbackfn: (value: ItemType) => void) {\n        const keys: string[] = Object.keys(this.map);\n        let tempKey: string;\n        const keysCount: number = keys.length;\n        for (let keyIndex: number = 0; keyIndex < keysCount; keyIndex++) {\n            tempKey = keys[keyIndex];\n            callbackfn(this.map[tempKey]);\n        }\n    }\n\n}\n","/**\n * @file EnumGameTool.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-05\n */\n\n/**\n * Enum representing the different tools available in the game.\n * Each tool provides a unique way to interact with and modify the game field.\n */\nexport enum GameTool {\n    /** Default tool for selecting items */\n    SELECTOR = \"SELECTOR\", \n    \n    /** Bomb tool that clears items in a radius of 1 item */\n    BOMB_1 = \"BOMB_1\", \n    \n    /** Bomb tool that clears items in a radius of 2 items */\n    BOMB_2 = \"BOMB_2\", \n    /** Single-row rocket that clears one horizontal line */\n    ROW_ROCKET_1 = \"ROW_ROCKET_1\", \n    \n    /** Single-column rocket that clears one vertical line */\n    COL_ROCKET_1 = \"COL_ROCKET_1\", \n    \n    /** Double-row rocket that clears two adjacent horizontal lines */\n    ROW_ROCKET_2 = \"ROW_ROCKET_2\",\n    \n    /** Double-column rocket that clears two adjacent vertical lines */\n    COL_ROCKET_2 = \"COL_ROCKET_2\",\n    \n    /** Nuke bomb that clears the entire field */\n    NUKE_BOMB = \"NUKE_BOMB\"\n}","import { injectable } from \"../Libs/Injects/decorators/injectable\";\nimport { inject } from \"../Libs/Injects/inject\";\nimport { ILevelConfigurationService } from \"./Interfaces/ILevelConfiguration\";\nimport { LevelConfigurationService } from \"./LevelConfiguration\";\n\n/**\n * Service responsible for handling coordinate transformations and calculations\n * for the game field. This includes converting between grid positions and\n * world coordinates.\n */\n@injectable()\nexport class FieldCoordinatesService {\n    private readonly _lvlConf: ILevelConfigurationService = inject(LevelConfigurationService);\n    private _widthInPixels: number;\n    private _heightInPixels: number;\n    private readonly offsetX: number;\n    private readonly offsetY: number;\n\n    /**\n     * Initializes the field coordinates service with the level configuration.\n     */\n    constructor() {\n        this._widthInPixels = this._lvlConf.width * this._lvlConf.cellWidth;\n        this._heightInPixels = this._lvlConf.height * this._lvlConf.cellHeight;\n        this.offsetX = (this._widthInPixels) / 2;\n        this.offsetY = (this._heightInPixels) / 2;\n    }\n\n    /**\n     * Converts world coordinates to grid coordinates.\n     * @param worldX X-coordinate in world space\n     * @param worldY Y-coordinate in world space\n     * @returns Grid coordinates\n     */\n    public worldToFieldCoordsinates(worldX: number, worldY: number): { x: number, y: number } {\n\n        // Calculate total grid size\n        const totalWidth = this._lvlConf.width * this._lvlConf.cellWidth;\n        const totalHeight = this._lvlConf.height * this._lvlConf.cellHeight;\n\n        // Calculate offset to center the entire grid\n        const offsetX = totalWidth / 2;\n        const offsetY = totalHeight / 2;\n\n        // Convert world coordinates to grid coordinates\n        const fieldX = Math.floor((worldX + offsetX) / this._lvlConf.cellWidth);\n        const fieldY = Math.floor((worldY + offsetY) / this._lvlConf.cellHeight);\n        \n        return { x: fieldX, y: fieldY };\n    }\n\n    /**\n     * Converts grid coordinates to world coordinates.\n     * @param fieldX X-coordinate in grid space\n     * @param fieldY Y-coordinate in grid space\n     * @returns World coordinates\n     */\n    public fieldToWorldCoordsinates(fieldX: number, fieldY: number): { x: number, y: number } {\n        // Calculate total grid size\n        const totalWidth = this._lvlConf.width * this._lvlConf.cellWidth;\n        const totalHeight = this._lvlConf.height * this._lvlConf.cellHeight;\n\n        // Calculate offset to center the entire grid\n        const offsetX = totalWidth / 2;\n        const offsetY = totalHeight / 2;\n\n        // Convert grid coordinates to world coordinates\n        const x = (fieldX - (this._lvlConf.width - 1) / 2) * this._lvlConf.cellWidth;\n        const y = (fieldY - (this._lvlConf.height - 1) / 2) * this._lvlConf.cellHeight;\n        return { x, y };\n    }\n\n    /**\n     * Converts grid coordinates to world coordinates for a spawn position.\n     * @param fieldX X-coordinate in grid space\n     * @param fieldY Y-coordinate in grid space\n     * @returns World coordinates for a spawn position\n     */\n    public fieldSpawnToWorldCoordsinates(fieldX: number, fieldY: number): { x: number, y: number } {\n        const coords = this.fieldToWorldCoordsinates(fieldX, this._lvlConf.height);\n        return { x: coords.x, y: coords.y + this._lvlConf.cellHeight * 2 };\n    }\n        \n}","/**\n * @file FiniteStateMachine.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-05\n */\n\nimport { IGameStateObserver } from '../../Game/GameSM/States/Observers/IGameStateObserver';\nimport { IState } from './interfaces/IState';\nimport { ITransition } from './interfaces/ITransition';\n\n/**\n * Generic implementation of a Finite State Machine.\n * Manages state transitions and notifies observers of state changes.\n * @template TContext - The type of context object used by the state machine\n */\nexport class FiniteStateMachine<TContext> {\n    private states: Map<string, IState<TContext>> = new Map();\n    private transitions: ITransition<TContext>[] = [];\n    private currentState: IState<TContext> | null = null;\n    protected context: TContext;\n\n    /** Set of observers that will be notified of state changes */\n    private _stateObservers: Set<IGameStateObserver> = new Set();\n\n    /**\n     * Adds an observer to be notified of state changes.\n     * @param observer - The observer to add\n     */\n    public addStateObserver(observer: IGameStateObserver): void {\n        this._stateObservers.add(observer);\n    }\n\n    /**\n     * Removes an observer from state change notifications.\n     * @param observer - The observer to remove\n     */\n    public removeStateObserver(observer: IGameStateObserver): void {\n        this._stateObservers.delete(observer);\n    }\n\n    /**\n     * Notifies all registered observers of a state change.\n     * @param newState - The name of the new state\n     */\n    private notifyGameStateChanged(newState: string): void {\n        this._stateObservers.forEach(observer => observer.onStateChanged(newState));\n    }\n    \n    /**\n     * Creates a new instance of the FiniteStateMachine.\n     * @param context - The context object to be used by the state machine\n     */\n    constructor(context: TContext) {\n        this.context = context;\n    }\n\n    /**\n     * Adds a new state to the state machine.\n     * @param state - The state to add\n     */\n    public addState(state: IState<TContext>): void {\n        this.states.set(state.name, state);\n    }\n\n    /**\n     * Adds a new transition to the state machine.\n     * @param transition - The transition to add\n     */\n    public addTransition(transition: ITransition<TContext>): void {\n        this.transitions.push(transition);\n    }\n\n    /**\n     * Sets the initial state of the state machine.\n     * @param stateName - The name of the initial state\n     */\n    public async setInitialState(stateName: string): Promise<void> {\n        const state = this.states.get(stateName);\n        if (!state) {\n            throw new Error(`State ${stateName} not found`);\n        }\n        this.currentState = state;\n        await this.currentState.onEnter?.(this.context);\n    }\n\n    /**\n     * Updates the state machine, checking for transitions and updating the current state.\n     */\n    public async update(): Promise<void> {\n        if (!this.currentState) {\n            return;\n        }\n\n        // Update current state\n        await this.currentState.update?.(this.context);\n\n        // Check transitions\n        const possibleTransitions = this.transitions.filter(t => t.from === this.currentState!.name);\n        \n        for (const transition of possibleTransitions) {\n            if (!transition.guardCondition || transition.guardCondition(this.context)) {\n                await this.transitionTo(transition.to);\n                break;\n            }\n        }\n    }\n\n    /**\n     * Transitions to a new state.\n     * Handles exit and entry actions, and notifies observers.\n     * @param stateName - The name of the new state\n     */\n    private async transitionTo(stateName: string): Promise<void> {\n        const newState = this.states.get(stateName);\n        if (!newState) {\n            throw new Error(`State ${stateName} not found`);\n        }\n\n        // Exit current state\n        await this.currentState?.onExit?.(this.context);\n\n        // Enter new state\n        this.currentState = newState;\n        await this.currentState.onEnter?.(this.context);\n        this.notifyGameStateChanged(stateName);\n    }\n\n    /**\n     * Gets the name of the current state.\n     * @returns The name of the current state, or null if no state is set\n     */\n    public getCurrentState(): string | null {\n        return this.currentState?.name ?? null;\n    }\n}","/**\n * @file GameBombActivation.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-06\n */\n\nimport { GameFieldItem } from \"../../../GameField/GameFieldItem\";\nimport { inject } from \"../../../Libs/Injects/inject\";\nimport { BaseState } from \"../../../Libs/StateMachine/BaseState\";\nimport { ILevelConfigurationService } from \"../../../Services/Interfaces/ILevelConfiguration\";\nimport { IPlayerInventoryObserver } from \"../../../Services/Interfaces/IPlayerInventoryObserver\";\nimport { IPlayerInventoryService } from \"../../../Services/Interfaces/IPlayerInventoryService\";\nimport { LevelConfigurationService } from \"../../../Services/LevelConfiguration\";\nimport { PlayerInventoryService } from \"../../../Services/PlayerInventoryService\";\nimport { GameTool } from \"../../EnumGameTool\";\nimport { GameContext } from \"../GameContext\";\n\nexport class GameBombActivation extends BaseState<GameContext> {\n    public static readonly STATE_NAME: string = 'GameBombActivation'\n    private readonly _lvlConf: ILevelConfigurationService = inject(LevelConfigurationService);\n    private readonly _inventory: IPlayerInventoryService = inject(PlayerInventoryService);\n    constructor() {\n        super(GameBombActivation.STATE_NAME);\n    }\n\n    public async onEnter(context: GameContext): Promise<void> {\n        \n        if (this._inventory.getAmount(context.currentTool) <= 0) {\n            context.skipMove = true;\n            context.currentTool = GameTool.SELECTOR;\n            return;\n        }\n\n        this._inventory.removeAmount(context.currentTool, 1);\n\n        const selectedItem = context.selectedItem;\n        if (!selectedItem) {\n            return;\n        }\n\n        const items = context.items;\n        const bombRadius = this._lvlConf.bombRadius[context.currentTool];\n\n        const cluster: GameFieldItem[] = [];\n\n        for (let i = -bombRadius; i <= bombRadius; i++) {\n            for (let j = -bombRadius; j <= bombRadius; j++) {\n                const x = selectedItem.position.x + i;\n                const y = selectedItem.position.y + j;\n                \n                if (x >= 0 && x < items.length && y >= 0 && y < items[0].length) {\n                    const item = items[x][y];\n                    if (item) {\n                        cluster.push(item);\n                    }\n                }\n            }\n        }\n\n        context.currentCluster = cluster;\n    }\n}","/**\n * @file GameCalculateScore.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-05\n */\n\nimport { BaseState } from \"../../../Libs/StateMachine/BaseState\";\nimport { GameContext } from \"../GameContext\";\n\n/**\n * Represents the state where the game calculates the score for removed items.\n * This state is entered after items have been removed from the game field.\n */\nexport class GameCalculateScore extends BaseState<GameContext> {\n    public static readonly STATE_NAME: string = 'GameCalculateScore';\n    \n    constructor() {\n        super(GameCalculateScore.STATE_NAME);\n    }\n\n    /**\n     * Handles entering the score calculation state.\n     * Increments the game moves counter and calculates score based on removed items.\n     * @param context - The game context\n     */\n    public async onEnter(context: GameContext): Promise<void> {\n        context.gameMoves++;\n        for (let i = 0; i < context.currentCluster.length; i++) {\n            context.gameScore += context.lvlConf.paytable[context.currentCluster[i].ItemType];\n        }\n    }\n}","/**\n * @file GameCollapseField.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-05\n */\n\nimport { inject } from \"../../../Libs/Injects/inject\";\nimport { BaseState } from \"../../../Libs/StateMachine/BaseState\";\nimport { FieldCoordinatesService } from \"../../../Services/FieldCoordinatesService\";\nimport { GameContext } from \"../GameContext\";\n\n/**\n * Represents the state where the game collapses the field after items are removed.\n * This state handles the gravity effect where items fall to fill empty spaces below them.\n */\nexport class GameCollapseField extends BaseState<GameContext>{\n    public static readonly STATE_NAME: string = 'GameCollapseField';\n    private readonly _coordinatesService: FieldCoordinatesService = inject(FieldCoordinatesService);\n    constructor() {\n        super(GameCollapseField.STATE_NAME);\n    }\n\n    /**\n     * Handles entering the field collapse state.\n     * Processes each column to move items down into empty spaces.\n     * @param context - The game context\n     */\n    public async onEnter(context: GameContext): Promise<void> {\n        const items = context.items;\n        const height = items[0].length;\n        const conf = context.lvlConf;\n        const movingItems = [];\n\n        // Process each column independently\n        for (let i = 0; i < items.length; i++) {\n            // Start checking from bottom\n            for (let j = 0; j < height; j++) {\n                if (!items[i][j]) {\n                    // Found an empty spot, look above for items to fall\n                    for (let above = j + 1; above < height; above++) {\n                        var item = items[i][above];\n                        if (item) {\n\n                             // Track the movement\n                             var cords = this._coordinatesService.fieldToWorldCoordsinates(i, j);\n\n                             movingItems.push(item.moveToPosition(cords.x, cords.y, 0.07, i * 0.04));\n                            // Update grid references\n                            items[i][j] = items[i][above];\n                            items[i][above] = null;\n                            break;\n                        }\n                    }\n                }\n            }\n        }       \n         // Wait for all movements to complete\n        await Promise.all(movingItems);\n        context.isMovingItems = false;\n    }\n}","/**\n * @file GameCollectAllClusters.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-06\n */\n\nimport { GameFieldItem } from \"../../../GameField/GameFieldItem\";\nimport { inject } from \"../../../Libs/Injects/inject\";\nimport { BaseState } from \"../../../Libs/StateMachine/BaseState\";\nimport { ClusterSeekerService } from \"../../../Services/ClusterSeekerService\";\nimport { IClusterSeekerService } from \"../../../Services/Interfaces/IClusterSeekerService\";\nimport { GameContext } from \"../GameContext\";\n\n/**\n * Represents the state where the game collects all possible clusters on the game field.\n * This state is used for special game modes or power-ups that affect multiple clusters at once.\n */\nexport class GameCollectAllClusters extends BaseState<GameContext> {\n    public static readonly STATE_NAME: string = 'GameCollectAllClusters'\n    private readonly _clusterSeeker: IClusterSeekerService = inject(ClusterSeekerService);\n    \n    constructor() {\n        super(GameCollectAllClusters.STATE_NAME);\n    }\n\n    /**\n     * Handles entering the collect all clusters state.\n     * Finds and collects all valid clusters on the game field.\n     * @param context - The game context\n     */\n    public async onEnter(context: GameContext): Promise<void> {\n        const conf = context.gameConf;\n        const items = context.items;\n        context.remainClusters = this._clusterSeeker.FindAllClusters(items, conf.minClusterSize, GameFieldItem.COMPONENT_NAME);\n        if (context.remainClusters.length >0 ){\n            context.shuffleCounter = 0;\n        }\n    }\n}","import { IGameConfigurationService } from \"./Interfaces/IGameConfigurationService\";\nimport { singleton } from \"../Libs/Injects/decorators/singleton\";\n\n/**\n * Service that provides game configuration settings.\n * This service manages global game settings such as animation durations,\n * reshuffle limits, and other game-wide parameters.\n */\n@singleton()\nexport class GameConfigurationService implements IGameConfigurationService {\n    /** Maximum number of reshuffles allowed */\n    private readonly _reshuffles: number = 3;\n    private _minClusterSize: number = 4;\n    private _startPointsAmount: number = 0;\n    \n    /**\n     * Gets the maximum number of reshuffles allowed.\n     */\n    public get reshuffles(): number {\n        return this._reshuffles;\n    }\n\n    /**\n     * Gets the minimum cluster size.\n     */\n    public get minClusterSize(): number {\n        return this._minClusterSize;\n    }\n\n    /**\n     * Gets the start points amount.\n     */\n    public get startPointsAmount(): number {\n        return this._startPointsAmount;\n    }\n    /**\n     * Sets the start points amount.\n     */\n    public set startPointsAmount(value: number) {\n        this._startPointsAmount = value;\n    }\n}","/**\n * @file GameContext.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-05\n */\n\nimport { Prefab, Node } from \"cc\";\nimport { singleton } from \"../../Libs/Injects/decorators/singleton\";\nimport { IGameContext } from \"./States/Observers/IGameContext\";\nimport { GameFieldItem } from \"../../GameField/GameFieldItem\";\nimport { LevelConfigurationService } from \"../../Services/LevelConfiguration\";\nimport { GameConfigurationService } from \"../../Services/GameConfigurationService\";\nimport { inject } from \"../../Libs/Injects/inject\";\nimport { IGameConfigurationService } from \"../../Services/Interfaces/IGameConfigurationService\";\nimport { ILevelConfigurationService } from \"../../Services/Interfaces/ILevelConfiguration\";\nimport { SelectedItemData } from \"../Base/SelectedItemData\";\nimport { IGameStatsObserver } from \"./States/Observers/IGameStatsObserver\";\nimport { GameTool } from \"../EnumGameTool\";\nimport { IGameToolObserver } from \"./States/Observers/IGameToolObserver\";\n\n/**\n * Represents the core game context that maintains the current state of the game.\n * This class holds all the essential game data including the game field, selected items,\n * current tools, scores, and other game-related information needed across different game states.\n */\n@singleton()\nexport class GameContext implements IGameContext {\n\n    /**\n     * Prefabs for game items.\n     */\n    private _itemPrefabs: Prefab[] = null;\n\n    /**\n     * Prefabs for game drops.\n     */\n    private _dropPrefabs: Prefab[] = null;\n\n    /**\n     * Pool of game field items.\n     */\n    private _itemsPool: GameFieldItem[] = [];\n\n    /**\n     * Current game field items in a 2D array.\n     */\n    private _items: GameFieldItem[][] = [];\n\n    /**\n     * Pool of game drops.\n     */\n    private _dropsPool: GameFieldItem[] = [];\n\n    /**\n     * The game node in the scene.\n     */\n    private _gameNode: Node = null;\n\n    /**\n     * Level configuration service.\n     */\n    private readonly _lvlConf: ILevelConfigurationService = inject(LevelConfigurationService);\n\n    /**\n     * Game configuration service.\n     */\n    private readonly _gameConf: IGameConfigurationService = inject(GameConfigurationService);\n\n    /**\n     * Currently selected item on the field.\n     */\n    private _selectedItem: SelectedItemData = null;\n\n    /**\n     * Items that have been dropped and need processing.\n     */\n    private _droppedItems: SelectedItemData[] = [];\n\n    /**\n     * Current cluster of items being processed.\n     */\n    private _currentCluster: GameFieldItem[] = null;\n\n    /**\n     * Flag indicating if a move is in progress.\n     */\n    private _isMovingItems: boolean = false;\n\n    /**\n     * Remaining clusters of items.\n     */\n    private _remainClusters: GameFieldItem[][] = [];\n\n    /**\n     * Shuffle counter.\n     */\n    private _shuffleCounter: number = 0;\n\n    /**\n     * Callback function for when an item is clicked.\n     */\n    private _onClickedItemCb: Function = null;\n\n    /**\n     * Current game score.\n     */\n    private _gameScore: number = 0;\n\n    /**\n     * Number of moves remaining.\n     */\n    private _gameMoves: number = 0;\n\n    /**\n     * Current game tool being used.\n     */\n    private _currentTool: GameTool = GameTool.SELECTOR;\n\n    /**\n     * Observers for game stats.\n     */\n    private _observers: Set<IGameStatsObserver> = new Set();\n\n    /**\n     * Observers for game tools.\n     */\n    private _toolObservers: Set<IGameToolObserver> = new Set();\n\n    /**\n     * Adds a tool observer.\n     * @param observer The observer to add.\n     */\n    public addToolObserver(observer: IGameToolObserver): void {\n        this._toolObservers.add(observer);\n    }\n\n    /**\n     * Removes a tool observer.\n     * @param observer The observer to remove.\n     */\n    public removeToolObserver(observer: IGameToolObserver): void {\n        this._toolObservers.delete(observer);\n    }\n\n    /**\n     * Adds a game stats observer.\n     * @param observer The observer to add.\n     */\n    public addObserver(observer: IGameStatsObserver): void {\n        this._observers.add(observer);\n    }\n\n    /**\n     * Removes a game stats observer.\n     * @param observer The observer to remove.\n     */\n    public removeObserver(observer: IGameStatsObserver): void {\n        this._observers.delete(observer);\n    }\n\n    /**\n     * Notifies observers that the score has changed.\n     * @param newScore The new score.\n     */\n    private notifyScoreChanged(newScore: number): void {\n        this._observers.forEach(observer => observer.onScoreChanged(newScore));\n    }\n\n    /**\n     * Notifies observers that the moves have changed.\n     * @param newMoves The new moves.\n     */\n    private notifyMovesChanged(newMoves: number): void {\n        this._observers.forEach(observer => observer.onMovesChanged(newMoves));\n    }\n\n    /**\n     * Notifies observers that the tool has changed.\n     * @param newTool The new tool.\n     */\n    private notifyToolChanged(newTool: GameTool): void {\n        this._toolObservers.forEach(observer => observer.onToolChanged(newTool));\n    }\n    \n    /**\n     * Flag to indicate if the current move should be skipped.\n     * When true, the game will bypass the current move without affecting the game state.\n     */\n    private _skipMove: boolean = false;\n    \n    // ========================= Getters & Setters =========================\n\n\n    public get skipMove(): boolean {\n        return this._skipMove;\n    }\n\n    public set skipMove(value: boolean) {\n        this._skipMove = value;\n    }\n\n    /**\n     * Gets the drop prefabs.\n     */\n    public get dropPrefabs(): Prefab[] {\n        return this._dropPrefabs;\n    }\n\n    /**\n     * Sets the drop prefabs.\n     * @param value The new drop prefabs.\n     */\n    public set dropPrefabs(value: Prefab[]) {\n        this._dropPrefabs = value;\n    }\n\n    /**\n     * Gets the drops pool.\n     */\n    public get dropsPool(): GameFieldItem[] {\n        return this._dropsPool;\n    }\n\n    /**\n     * Sets the drops pool.\n     * @param value The new drops pool.\n     */\n    public set dropsPool(value: GameFieldItem[]) {\n        this._dropsPool = value;\n    }\n\n    /**\n     * Gets the dropped items.\n     */\n    public get droppedItems(): SelectedItemData[] {\n        return this._droppedItems;\n    }\n\n    /**\n     * Sets the dropped items.\n     * @param value The new dropped items.\n     */\n    public set droppedItems(value: SelectedItemData[]) {\n        this._droppedItems = value;\n    }\n\n    /**\n     * Gets the current tool.\n     */\n    public get currentTool(): GameTool {\n        return this._currentTool;\n    }\n\n    /**\n     * Sets the current tool.\n     * @param value The new current tool.\n     */\n    public set currentTool(value: GameTool) {\n        if (this._currentTool != value) {\n            this._currentTool = value;\n            this.notifyToolChanged(value);\n        }\n    }\n\n    /**\n     * Gets whether the game is out of moves.\n     */\n    public get outOfMoves(): boolean {\n        return this._gameMoves >= this.lvlConf.maxMoves;\n    }\n\n    /**\n     * Gets whether the point target has been reached.\n     */\n    public get pointTargetReached(): boolean {\n        return this._gameScore >= this.lvlConf.targetScore;\n    }\n\n    /**\n     * Gets the game moves.\n     */\n    public get gameMoves(): number {\n        return this._gameMoves;\n    }\n\n    /**\n     * Sets the game moves.\n     * @param value The new game moves.\n     */\n    public set gameMoves(value: number) {\n        if (this._gameMoves !== value) {\n            this._gameMoves = value;\n            this.notifyMovesChanged(value);\n        }\n    }\n\n    /**\n     * Gets the game score.\n     */\n    public get gameScore(): number {\n        return this._gameScore;\n    }\n\n    /**\n     * Sets the game score.\n     * @param value The new game score.\n     */\n    public set gameScore(value: number) {\n        if (this._gameScore !== value) {\n            this._gameScore = value;\n            this.notifyScoreChanged(value);\n        }\n    }\n\n    /**\n     * Gets the on clicked item callback.\n     */\n    public get onClickedItemCb(): Function {\n        return this._onClickedItemCb;\n    }\n\n    /**\n     * Sets the on clicked item callback.\n     * @param value The new on clicked item callback.\n     */\n    public set onClickedItemCb(value: Function) {\n        this._onClickedItemCb = value;\n    }\n\n    /**\n     * Gets the shuffle counter.\n     */\n    public get shuffleCounter(): number {\n        return this._shuffleCounter;\n    }\n\n    /**\n     * Sets the shuffle counter.\n     * @param value The new shuffle counter.\n     */\n    public set shuffleCounter(value: number) {\n        this._shuffleCounter = value;\n    }\n\n    /**\n     * Gets the remaining clusters.\n     */\n    public get remainClusters(): GameFieldItem[][] {\n        return this._remainClusters;\n    }\n\n    /**\n     * Sets the remaining clusters.\n     * @param value The new remaining clusters.\n     */\n    public set remainClusters(value: GameFieldItem[][]) {\n        this._remainClusters = value;\n    }\n\n    /**\n     * Gets whether the game is moving items.\n     */\n    public get isMovingItems(): boolean {\n        return this._isMovingItems;\n    }\n\n    /**\n     * Sets whether the game is moving items.\n     * @param value The new is moving items.\n     */\n    public set isMovingItems(value: boolean) {\n        this._isMovingItems = value;\n    }\n\n    /**\n     * Gets the current cluster.\n     */\n    public get currentCluster(): GameFieldItem[] {\n        return this._currentCluster;\n    }\n\n    /**\n     * Sets the current cluster.\n     * @param value The new current cluster.\n     */\n    public set currentCluster(value: GameFieldItem[]) {\n        this._currentCluster = value;\n    }\n\n    /**\n     * Gets the selected item.\n     */\n    public get selectedItem(): SelectedItemData {\n        return this._selectedItem;\n    }\n\n    /**\n     * Sets the selected item.\n     * @param value The new selected item.\n     */\n    public set selectedItem(value: SelectedItemData) {\n        this._selectedItem = value;\n    }\n\n    /**\n     * Gets the game node.\n     */\n    public get gameNode(): Node {\n        return this._gameNode;\n    }\n\n    /**\n     * Sets the game node.\n     * @param value The new game node.\n     */\n    public set gameNode(value: Node) {\n        this._gameNode = value;\n    }\n\n    /**\n     * Gets the items.\n     */\n    public get items(): GameFieldItem[][] {\n        return this._items;\n    }\n\n    /**\n     * Sets the items.\n     * @param value The new items.\n     */\n    public set items(value: GameFieldItem[][]) {\n        this._items = value;\n    }\n\n    /**\n     * Gets the level configuration.\n     */\n    public get lvlConf(): ILevelConfigurationService {\n        return this._lvlConf;\n    }\n\n    /**\n     * Gets the game configuration.\n     */\n    public get gameConf(): IGameConfigurationService {\n        return this._gameConf;\n    }\n\n    /**\n     * Gets the item prefabs.\n     */\n    public get itemPrefabs(): Prefab[] {\n        return this._itemPrefabs;\n    }\n\n    /**\n     * Sets the item prefabs.\n     * @param value The new item prefabs.\n     */\n    public set itemPrefabs(value: Prefab[]) {\n        this._itemPrefabs = value;\n    }\n\n    /**\n     * Gets the items pool.\n     */\n    public get itemsPool(): GameFieldItem[] {\n        return this._itemsPool;\n    }\n\n    /**\n     * Sets the items pool.\n     * @param value The new items pool.\n     */\n    public set itemsPool(value: GameFieldItem[]) {\n        this._itemsPool = value;\n    }\n\n    /**\n     * Gets whether the game can reshuffle.\n     */\n    public get canReshuffle(): boolean {\n        return this._shuffleCounter <= this.gameConf.reshuffles;\n    }\n\n    /**\n     * Gets whether the game needs to reshuffle.\n     */\n    public get needReshuffle(): boolean {\n        return this.remainClusters.length == 0;\n    }\n}","/**\n * @file GameDropBooster.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-06\n */\n\nimport { instantiate, Prefab } from \"cc\";\nimport { GameFieldItem } from \"../../../GameField/GameFieldItem\";\nimport { inject } from \"../../../Libs/Injects/inject\";\nimport { BaseState } from \"../../../Libs/StateMachine/BaseState\";\nimport { ArrayUtils } from \"../../../Libs/utils/ArrayUtils\";\nimport { ILevelConfigurationService } from \"../../../Services/Interfaces/ILevelConfiguration\";\nimport { LevelConfigurationService } from \"../../../Services/LevelConfiguration\";\nimport { SelectedItemData } from \"../../Base/SelectedItemData\";\nimport { GameContext } from \"../GameContext\";\nimport { GameTool } from \"../../EnumGameTool\";\n\n/**\n * Represents the state where the game drops a booster item onto the game field.\n * This state is entered when a cluster is cleared and meets the conditions for dropping a booster.\n */\nexport class GameDropBooster extends BaseState<GameContext>{\n    public static readonly STATE_NAME: string = 'GameDropBooster';\n    private _lvlConf: ILevelConfigurationService = inject(LevelConfigurationService);\n    \n    /**\n     * Initializes the GameDropBooster state.\n     */\n    constructor() {\n        super(GameDropBooster.STATE_NAME);\n    }\n\n    /**\n     * Handles entering the booster drop state.\n     * Determines if a booster should be dropped based on cluster size and configuration.\n     * Creates and places the booster if conditions are met.\n     * @param context - The game context\n     */\n    public async onEnter(context: GameContext): Promise<void> {\n        if(context.selectedItem.item.IsBooster || context.currentTool != GameTool.SELECTOR) \n            return;\n        \n        const clusterLength = context.currentCluster.length;\n        const drops = this._lvlConf.drops;\n        let maxDropKey = 0;\n        for (const key of Object.keys(drops)) {\n            const numKey = parseInt(key);\n            if (numKey <= clusterLength && numKey > maxDropKey) {\n                maxDropKey = numKey;\n            }\n        }\n       \n        const drop = ArrayUtils.getRandomItem(drops[maxDropKey]); // Get a random item from the highest key drops[maxDropKey];\n        if (drop == null) return;\n\n        var dropItem:GameFieldItem = this.getCachedDrop(context, drop);\n        \n        if (dropItem == null) {\n            for (let i = 0; i < context.dropPrefabs.length; i++) {\n                let dropPrefab: Prefab = context.dropPrefabs[i];\n                if (dropPrefab.name != drop){\n                    continue;\n                }\n                dropItem = instantiate(dropPrefab).getComponent(GameFieldItem.COMPONENT_NAME) as GameFieldItem;\n                dropItem.node.on(GameFieldItem.CLICKED_EVENT, (clickedItem: GameFieldItem) => {\n                    context.onClickedItemCb(clickedItem);\n                });\n            }\n        }\n\n        var itemData = new SelectedItemData();\n        itemData.position = context.selectedItem.position;\n        itemData.item = dropItem;\n        context.droppedItems.push(itemData);\n    }\n\n    /**\n     * Attempts to get a cached booster item from the drops pool.\n     * @param context - The game context\n     * @param drop - The type of booster to retrieve\n     * @returns The cached booster item if found, null otherwise\n     */\n    private getCachedDrop(context: GameContext, drop: string):GameFieldItem {\n        for (let i = 0; i < context.dropsPool.length; i++) {\n            if (context.dropsPool[i].ItemType == drop) {\n                const item = context.dropsPool[i];\n                context.dropsPool.splice(i, 1);\n                return item;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Handles exiting the booster drop state.\n     * Resets the selected item.\n     * @param context - The game context\n     */\n    public async onExit(context: GameContext): Promise<void> {\n        context.selectedItem = null;\n    }\n}","/**\n * @file GameField.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-05\n */\n\nimport { _decorator, Component, Prefab, UITransform, Node, Vec2, Vec3, Size, CCFloat} from \"cc\";\nimport { inject } from \"../Libs/Injects/inject\";\nimport { GameStateMachine } from \"../Game/GameSM/GameSM\";\nimport { IUIService } from \"../Services/Interfaces/IUIService\";\nimport { UIService } from \"../Services/UIService\";\nimport { Paddings } from \"../UI/Paddings\";\nconst { ccclass, property } = _decorator;\n\n/**\n * Represents the main game field component that manages the game field's UI and layout.\n * This class handles the initialization of the game field, binding of the game state machine,\n * and updating of the game field's UI.\n */\n@ccclass('GameField')\nexport class GameField extends Component {\n\n    /**\n     * The prefabs for the game items.\n     */\n    @property({ \n        type: [Prefab],\n        tooltip: 'Prefabs for regular game items that can be placed in the grid'\n    })\n    public itemPrefabs: Prefab[] = [];\n\n    /**\n     * The prefabs for the game drops.\n     */\n    @property({ \n        type: [Prefab],\n        tooltip: 'Prefabs for game drops that can be placed in the grid'\n    })\n    public dropPrefabs: Prefab[] = [];\n    \n    /**\n     * The target node for the game field's UI.\n     */\n    @property({ \n        type: Node,\n        tooltip: 'Container node for the game field UI'\n    })\n    public targetNode: Node = null;\n\n    /**\n     * The nodes that should be scaled to fit the game field's UI.\n     */\n    @property({ \n        type: [Node],\n        tooltip: 'Array of nodes that should be scaled to fit the game field UI'\n    })\n    public scaleTargets: Node[] = [];\n\n    /**\n     * The mask target node for the game field's UI.\n     */\n    @property({ \n        type: Node,\n        tooltip: 'Container node for the game field mask'\n    })\n    public maskTarget: Node = null;\n\n    /**\n     * The padding value for the scale targets.\n     */\n    @property({ \n        type: CCFloat,\n        tooltip: 'Padding value for the scale targets'\n    })\n    public scaleTargetsPadding: Number = 0;\n\n    /**\n     * The paddings for the target node.\n     */\n    @property({ \n        type: Paddings, \n        visible: true, \n        serializable: true,\n        tooltip: 'Padding values for the game field layout'\n    })\n    public targetPaddings: Paddings = new Paddings();\n\n    /**\n     * The paddings for the mask target node.\n     */\n    @property({ \n        type: Paddings, \n        visible: true, \n        serializable: true,\n        tooltip: 'Padding values for the game field mask'\n    })\n    public maskPaddings: Paddings = new Paddings();\n\n    private _uiService: IUIService = inject(UIService);\n\n    private _stateMachine: GameStateMachine = inject(GameStateMachine);\n\n    /**\n     * Initializes the game field component.\n     */\n    protected async start(): Promise<void> {\n        this._stateMachine.setItems(this.itemPrefabs);\n        this._stateMachine.setDrops(this.dropPrefabs);\n\n        if (this.targetNode != null) {\n            await this._stateMachine.bind(this.targetNode);\n            await this._uiService.resetSize([this.targetNode], null);\n            await this._uiService.resetSize(this.scaleTargets, this.targetPaddings);\n            await this._uiService.resetSize([this.maskTarget], this.maskPaddings);\n            return;\n        }\n        \n        this._stateMachine.bind(this.node);\n    }\n\n    /**\n     * Updates the game field component.\n     * @param dt The time delta since the last update.\n     */\n    protected async update(dt: number): Promise<void> {\n        await this._stateMachine.update();\n    }\n}","/**\n * @file GameFieldItem.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-05\n */\n\nimport { _decorator, Component, Vec3, tween, Node, EventTouch, UITransform, CCString, CCBoolean } from \"cc\";\nconst { ccclass, property } = _decorator;\n\n/**\n * Represents an individual item in the game field.\n * This class handles the visual representation and behavior of game pieces\n * that can be matched, cleared, or affected by various game tools.\n */\n@ccclass('GameFieldItem')\nexport class GameFieldItem extends Component {\n    public static readonly COMPONENT_NAME: string = 'GameFieldItem';\n    public static readonly CLICKED_EVENT: string = 'item-clicked';\n    \n    /**\n     * The type of the item.\n     */\n    @property({\n        type: CCString,\n        tooltip: 'The type identifier for this game item'\n    })\n    public ItemType: string = \"\";\n    /**\n     * Flag indicating if the item is a booster.\n     */\n    @property({\n        type: CCBoolean,\n        tooltip: 'Indicates if this item is a booster type'\n    })\n    public IsBooster: boolean = false;\n    \n    private _isInteractable: boolean = true;\n\n    /**\n     * Moves the item to a specified position over a duration.\n     * @param x The x-coordinate of the target position\n     * @param y The y-coordinate of the target position\n     * @param duration The time it takes to move to the target position\n     * @param delay The delay before starting the movement\n     */\n    public async moveToPosition(x: number, y: number, duration: number, delay: number = 0): Promise<void> {\n        return new Promise<void>((resolve) => {\n            tween(this.node)\n                .delay(delay)\n                .to(duration, { position: new Vec3(x, y, 0) })\n                .call(() => resolve())\n                .start();\n        });\n    }\n    \n    /**\n     * Called when the component is loaded.\n     */\n    onLoad() {\n        // Add click event listener\n        this.node.on(Node.EventType.TOUCH_END, this.onClick, this);\n    }\n\n    /**\n     * Handles the click event on the item.\n     * @param event The touch event\n     */\n    onClick(event: EventTouch) {\n        if (!this._isInteractable) \n            return;\n        // Get click position in node space\n        const location = event.getUILocation();\n        const transform = this.node.getComponent(UITransform);\n        \n        if (transform) {\n            const nodePos = transform.convertToNodeSpaceAR(new Vec3(location.x, location.y, 0));\n            const size = transform.contentSize;\n            \n            // Check if click is within sprite bounds\n            if (Math.abs(nodePos.x) <= size.width/2 && Math.abs(nodePos.y) <= size.height/2) {\n                this.node.emit(GameFieldItem.CLICKED_EVENT, this); \n            }\n        }\n    }\n}","/**\n * @file GameFillField.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-06\n */\n\nimport { instantiate, Prefab } from \"cc\";\nimport { GameFieldItem } from \"../../../GameField/GameFieldItem\";\nimport { BaseState } from \"../../../Libs/StateMachine/BaseState\";\nimport { ArrayUtils } from \"../../../Libs/utils/ArrayUtils\";\nimport { GameContext } from \"../GameContext\";\nimport { inject } from \"../../../Libs/Injects/inject\";\nimport { IClusterSeekerService } from \"../../../Services/Interfaces/IClusterSeekerService\";\nimport { ClusterSeekerService } from \"../../../Services/ClusterSeekerService\";\nimport { FieldCoordinatesService } from \"../../../Services/FieldCoordinatesService\";\nimport { ILevelConfigurationService } from \"../../../Services/Interfaces/ILevelConfiguration\";\nimport { LevelConfigurationService } from \"../../../Services/LevelConfiguration\";\n\n/**\n * Represents the state where the game fills the field with new items.\n * This state is responsible for initializing the game field at the start\n * and refilling empty spaces with new items.\n */\nexport class GameFillField extends BaseState<GameContext>{\n\n    public static readonly STATE_NAME: string = 'GameFillField';\n    private readonly _clusterSeeker: IClusterSeekerService =  inject(ClusterSeekerService);\n    private readonly _coordinatesService: FieldCoordinatesService = inject(FieldCoordinatesService);\n    private readonly _lvlConf: ILevelConfigurationService = inject(LevelConfigurationService);\n    \n    constructor() {\n        super(GameFillField.STATE_NAME);\n    }\n\n    /**\n     * Handles entering the field fill state.\n     * Creates and places new items in empty spaces on the game field.\n     * @param context - The game context\n     */\n    public async onEnter(context: GameContext): Promise<void> {\n        const gameConf = context.gameConf;\n        const lvlConf = context.lvlConf;\n        const rootNode = context.gameNode;\n        context.gameScore = gameConf.startPointsAmount;\n        const items = context.items;\n\n        for (let i = 0; i < lvlConf.width; i++) {\n            context.items[i] = [];\n            for (let j = 0; j < lvlConf.height; j++) {                \n                var poolItem = this.createItem(context);\n                context.itemsPool.push(poolItem);\n                const item = this.createItem(context);\n                var cords = this._coordinatesService.fieldToWorldCoordsinates(i, j);\n                item.node.setPosition(cords.x, cords.y);\n                rootNode.addChild(item.node);\n\n                items[i][j] = item;\n            }\n        }\n\n        //add boosters\n        for (let i = 0; i < context.dropPrefabs.length; i++) {\n            const item = instantiate(context.dropPrefabs[i]);\n            var itemComponent = item.getComponent(GameFieldItem.COMPONENT_NAME) as GameFieldItem;\n            item.on(GameFieldItem.CLICKED_EVENT, (clickedItem: GameFieldItem) => {\n                context.onClickedItemCb(clickedItem);\n            });\n            context.dropsPool.push(itemComponent);\n        }\n        \n        ///reshiffle in the beginning\n        context.remainClusters = this._clusterSeeker.FindAllClusters(items, gameConf.minClusterSize, GameFieldItem.COMPONENT_NAME);\n        const initialreshuffle = context.remainClusters.length == 0;\n        if (initialreshuffle) {\n            while(context.remainClusters.length == 0 && context.shuffleCounter <= gameConf.reshuffles){\n                context.shuffleCounter++;\n                context.remainClusters = this._clusterSeeker.FindAllClusters(items, gameConf.minClusterSize, GameFieldItem.COMPONENT_NAME);\n            }\n\n            for (let i = 0; i < lvlConf.width; i++) {\n                context.items[i] = [];\n                for (let j = 0; j < lvlConf.height; j++) {                \n                    var item = items[i][j];\n                    var cords = this._coordinatesService.fieldToWorldCoordsinates(i, j);\n                    item.node.setPosition(cords.x, cords.y);\n                }\n            }  \n        }\n    }\n\n\n    /**\n     * Creates a new game item.\n     * @param context - The game context\n     * @param subscribeClickEvents - Whether to subscribe to click events\n     * @returns The created game item\n     */\n    private createItem(context: GameContext, subscribeClickEvents: boolean = true):GameFieldItem{\n        const item = instantiate((ArrayUtils.getRandomItem(context.itemPrefabs)));\n        var itemComponent = item.getComponent(GameFieldItem.COMPONENT_NAME) as GameFieldItem;\n        if(subscribeClickEvents){\n            item.on(GameFieldItem.CLICKED_EVENT, (clickedItem: GameFieldItem) => {\n                context.onClickedItemCb(clickedItem);\n            });\n        }\n        return itemComponent;\n    }\n\n}","/**\n * @file GameIdle.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-05\n */\n\nimport { BaseState } from \"../../../Libs/StateMachine/BaseState\";\nimport { SelectedItemData } from \"../../Base/SelectedItemData\";\nimport { GameTool } from \"../../EnumGameTool\";\nimport { GameContext } from \"../GameContext\";\n\n/**\n * Represents the idle state of the game where the game is waiting for player input.\n * This is the default state where players can select items on the game field.\n */\nexport class GameIdle extends BaseState<GameContext>{\n    public static readonly STATE_NAME: string = 'GameIdle';\n    private _context: GameContext = null;\n    /**\n     * Creates a new instance of the GameIdle state.\n     */\n    constructor() {\n        super(GameIdle.STATE_NAME);\n    }\n\n    /**\n     * Handles entering the idle state.\n     * Sets up event listeners for item selection and resets the current tool to selector.\n     * @param context - The game context\n     */\n    public async onEnter(context: GameContext): Promise<void> {\n        context.currentTool = GameTool.SELECTOR\n        context.skipMove = false;\n        context.gameNode.on(SelectedItemData.SELECTED_EVENT, this.onItemSelected, this);\n        this._context = context;\n    }\n\n    /**\n     * Handles exiting the idle state.\n     * Removes event listeners for item selection.\n     * @param context - The game context\n     */\n    public async onExit(context: GameContext): Promise<void> {\n        context.gameNode.off(SelectedItemData.SELECTED_EVENT, this.onItemSelected, this);\n    }\n\n    /**\n     * Handles the selection of an item on the game field.\n     * Updates the game context with the selected item data.\n     * @param event - Data about the selected item\n     */\n    private onItemSelected(event: SelectedItemData): void {\n        this._context.selectedItem = event;\n    }\n}","/**\n * @file GameLandDrop.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-05\n */\n\nimport { inject } from \"../../../Libs/Injects/inject\";\nimport { BaseState } from \"../../../Libs/StateMachine/BaseState\";\nimport { FieldCoordinatesService } from \"../../../Services/FieldCoordinatesService\";\nimport { SelectedItemData } from \"../../Base/SelectedItemData\";\nimport { GameContext } from \"../GameContext\";\n\n/**\n * Represents the state where dropped items land on the game field.\n * This state handles the placement of dropped items (like boosters or special items)\n * into their final positions on the game field.\n */\nexport class GameLandDrop extends BaseState<GameContext> {\n    public static readonly STATE_NAME: string = 'GameLandDrop'\n    private readonly _coordinatesService: FieldCoordinatesService = inject(FieldCoordinatesService);\n    \n    constructor() {\n        super(GameLandDrop.STATE_NAME);\n    }\n\n    /**\n     * Handles entering the land drop state.\n     * Places dropped items into their designated positions on the field.\n     * @param context - The game context\n     */\n    public async onEnter(context: GameContext): Promise<void> {        \n        for (let i = 0; i < context.droppedItems.length; i++) {\n            this.replaceItem(context, context.droppedItems[i]);\n        }\n        context.droppedItems = [];\n    }\n\n    private replaceItem(context: GameContext, itemData: SelectedItemData): void {\n        var currentItem = context.items[itemData.position.x][itemData.position.y];\n        currentItem.node.removeFromParent();\n        context.itemsPool.push(currentItem);\n\n        context.items[itemData.position.x][itemData.position.y] = itemData.item;\n\n        var cords = this._coordinatesService.fieldToWorldCoordsinates(itemData.position.x, itemData.position.y);\n        itemData.item.node.setPosition(cords.x, cords.y);\n        context.gameNode.addChild(itemData.item.node);\n    }\n}   ","/**\n * @file GameOver.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-05\n */\n\nimport { BaseState } from \"../../../Libs/StateMachine/BaseState\";\nimport { GameContext } from \"../GameContext\";\n\n/**\n * Represents the final state when the game is over.\n * This state is entered when the player has either won or lost the game,\n * typically when they've run out of moves or reached the target score.\n */\nexport class GameOver extends BaseState<GameContext>{\n    public static readonly STATE_NAME: string = 'GameOver';\n\n    constructor() {\n        super(GameOver.STATE_NAME);\n    }\n\n    /**\n     * Handles entering the game over state.\n     * Performs final game cleanup and triggers the game over UI.\n     * @param context - The game context\n     */\n    public async onEnter(context: GameContext): Promise<void> {\n        // Clean up the game field\n        const items = context.items;\n        for (let i = 0; i < items.length; i++) {\n            for (let j = 0; j < items[i].length; j++) {\n                if (items[i][j]) {\n                    items[i][j].node.removeFromParent();\n                    context.itemsPool.push(items[i][j]);\n                    items[i][j] = null;\n                }\n            }\n        }\n\n        // Trigger game over UI or any other necessary actions\n        context.gameNode.emit('game-over');\n    }\n}","/**\n * @file GameOverWindow.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-06\n */\n\nimport { _decorator, Component, Node, Label } from 'cc';\nimport { GameContext } from '../Game/GameSM/GameContext';\nimport { inject } from '../Libs/Injects/inject';\nconst { ccclass, property } = _decorator;\n\n/**\n * Component that manages the game over window display.\n */\n@ccclass('GameOverWindow')\nexport class GameOverWindow extends Component {\n    /** Reference to the game context */\n    private readonly _gameContext: GameContext = inject(GameContext);\n\n    /** Label displaying the final points */\n    @property({\n        type: Label,\n        visible: true,\n        tooltip: 'Label component for displaying the final score'\n    })\n    private _pointsLbl: Label = null;\n\n    /** Label displaying the moves used */\n    @property({\n        type: Label,\n        visible: true,\n        tooltip: 'Label component for displaying the number of moves used'\n    })\n    private _movesLbl: Label = null;\n\n    /**\n     * Called when the component is enabled.\n     * Updates the points and moves labels with the current game score and moves.\n     */\n    onEnable() {\n        this._pointsLbl.string = this._gameContext.gameScore.toString();\n        this._movesLbl.string = this._gameContext.gameMoves.toString();\n    }\n}\n","/**\n * @file GameRefillGrid.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-05\n */\n\nimport { GameFieldItem } from \"../../../GameField/GameFieldItem\";\nimport { inject } from \"../../../Libs/Injects/inject\";\nimport { BaseState } from \"../../../Libs/StateMachine/BaseState\";\nimport { ArrayUtils } from \"../../../Libs/utils/ArrayUtils\";\nimport { FieldCoordinatesService } from \"../../../Services/FieldCoordinatesService\";\nimport { GameContext } from \"../GameContext\";\n\n/**\n * Represents the state where the game refills the grid with new items.\n * This state is entered after items have been removed and the field has collapsed,\n * ensuring the grid is always full and playable.\n */\nexport class GameRefillGrid extends BaseState<GameContext>{\n    public static readonly STATE_NAME: string = 'GameRefillGrid'\n\n    private readonly _coordinatesService: FieldCoordinatesService = inject(FieldCoordinatesService);\n\n    constructor() {\n        super(GameRefillGrid.STATE_NAME);\n    }\n\n    /**\n     * Handles entering the grid refill state.\n     * Identifies empty spaces and fills them with new items.\n     * @param context - The game context\n     */\n    public async onEnter(context: GameContext): Promise<void> {\n        const items = context.items;\n        const itemPool = context.itemsPool;\n        const lvlConf = context.lvlConf;\n        const rootNode = context.gameNode;\n        const movingItems = [];\n        context.isMovingItems = true;\n\n        for (let i = 0; i < lvlConf.width; i++) {\n            for (let j = 0; j < lvlConf.height; j++) {\n                if (!items[i][j]) {\n                    // const dropItem = this.getDropItem(context, i, j);\n                    const item = ArrayUtils.getRandomItem(itemPool) as GameFieldItem;\n                    ArrayUtils.removeItem(itemPool, item);\n                    items[i][j] = item;\n                    // add item on top of the grid (it will be behind the mask)\n                    var cords = this._coordinatesService.fieldToWorldCoordsinates(i, j);\n                    var spawnCords =  this._coordinatesService.fieldSpawnToWorldCoordsinates(i, j);\n                    item.node.setPosition(spawnCords.x, spawnCords.y);\n\n                    rootNode.addChild(item.node);\n                     // Track the movement\n                    movingItems.push(item.moveToPosition(cords.x, cords.y, 0.1, i * 0.08));\n                }\n            }\n        }\n        // Wait for all movements to complete\n        await Promise.all(movingItems);\n        context.isMovingItems = false;\n    }\n}","/**\n * @file GameRemoveCluster.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-05\n */\n\nimport { BaseState } from \"../../../Libs/StateMachine/BaseState\";\nimport { GameContext } from \"../GameContext\";\n\n/**\n * Represents the state where the game removes a cluster of items from the game field.\n * This state is entered after a valid cluster has been found and selected.\n */\nexport class GameRemoveCluster extends BaseState<GameContext> {\n    public static readonly STATE_NAME: string = 'GameRemoveCluster';\n\n    constructor() {\n        super(GameRemoveCluster.STATE_NAME);\n    }\n\n    /**\n     * Handles entering the cluster removal state.\n     * Removes the selected cluster of items from the game field and adds them to the appropriate pools.\n     * @param context - The game context\n     */\n    public async onEnter(context: GameContext): Promise<void> {\n        const cluster = context.currentCluster;\n        if (!cluster || cluster.length === 0) {\n            return;\n        }\n\n        const items = context.items;\n        const pool = context.itemsPool;\n        const dropsPool = context.dropsPool;\n\n        for (const item of cluster) {\n            const index = items.findIndex(row => row.indexOf(item) !== -1);\n            if (index !== -1) {\n                const columnIndex = items[index].indexOf(item);\n                if (columnIndex !== -1) {\n                    // Remove the item from the grid\n                    items[index][columnIndex] = null;\n                    // Remove the item from the scene and add to pool\n                    item.node.removeFromParent();\n                    if (item.IsBooster) {\n                        dropsPool.push(item);\n                    }else{\n                        pool.push(item);\n                    }\n                }\n            }\n        }\n        //cleanup\n        context.currentCluster = null;\n    }\n}","/**\n * @file GameReshuffleField.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-05\n */\n\nimport { inject } from \"../../../Libs/Injects/inject\";\nimport { BaseState } from \"../../../Libs/StateMachine/BaseState\";\nimport { FieldCoordinatesService } from \"../../../Services/FieldCoordinatesService\";\nimport { GameContext } from \"../GameContext\";\n\n/**\n * Represents the state where the game reshuffles all items on the field.\n * This state is entered when there are no valid moves available,\n * ensuring the game remains playable by randomizing item positions.\n */\nexport class GameReshuffleField extends BaseState<GameContext>{\n    public static readonly STATE_NAME: string = 'GameReshuffleField';\n    private readonly _coordinatesService: FieldCoordinatesService = inject(FieldCoordinatesService);\n    /**\n     * Initializes a new instance of the GameReshuffleField state.\n     */\n    constructor() {\n        super(GameReshuffleField.STATE_NAME);\n    }\n\n    /**\n     * Handles entering the field reshuffle state.\n     * Randomly redistributes all items on the game field.\n     * @param context - The game context\n     */\n    public async onEnter(context: GameContext): Promise<void> {\n        context.isMovingItems = true;\n        const items = context.items;\n        const movingItems = [];\n        const lvlConf = context.lvlConf;\n\n        context.items.shuffle2D();\n        \n        for (let i = 0; i < lvlConf.width; i++) {\n            for (let j = 0; j < lvlConf.height; j++) {\n                var item = items[i][j];\n                var cords = this._coordinatesService.fieldToWorldCoordsinates(i, j);\n                movingItems.push(item.moveToPosition(cords.x, cords.y, 1));\n            }\n        }\n        // Wait for all movements to complete\n        await Promise.all(movingItems);\n        context.isMovingItems = false;\n    }\n\n    /**\n     * Handles exiting the field reshuffle state.\n     * Increments the shuffle counter.\n     * @param context - The game context\n     */\n    public async onExit(context: GameContext): Promise<void> {\n        context.shuffleCounter++;\n    }\n}","/**\n * @file GameSearchCluster.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-06\n */\n\nimport { inject } from \"../../../Libs/Injects/inject\";\nimport { BaseState } from \"../../../Libs/StateMachine/BaseState\";\nimport { ClusterSeekerService } from \"../../../Services/ClusterSeekerService\";\nimport { IClusterSeekerService } from \"../../../Services/Interfaces/IClusterSeekerService\";\nimport { GameContext } from \"../GameContext\";\n\n/**\n * Represents the state where the game searches for a cluster of matching items.\n * A cluster is a group of adjacent items of the same type that can be removed together.\n */\nexport class GameSearchCluster extends BaseState<GameContext>{\n    public static readonly STATE_NAME: string = 'GameSearchCluster';\n    private readonly _clusterSeeker: IClusterSeekerService =  inject(ClusterSeekerService);\n    \n    constructor() {\n        super(GameSearchCluster.STATE_NAME);\n    }\n\n    /**\n     * Handles entering the cluster search state.\n     * Searches for a cluster of matching items around the selected item.\n     * @param context - The game context\n     */\n    public async onEnter(context: GameContext): Promise<void> {\n        const conf = context.gameConf;\n        const item = context.selectedItem;\n        const items = context.items;\n        // If it's booster then we just need to set the cluster and return\n        if (item.item.IsBooster){\n            context.currentCluster = [item.item];\n            return;\n        }\n        const cluster = this._clusterSeeker.CollectCluster(items, conf.minClusterSize, item.position.x, item.position.y, 'ItemType');\n\n        if (cluster.length >= conf.minClusterSize) {\n            context.currentCluster = cluster;\n        }else{\n            context.selectedItem = null;\n        }\n    }\n}","/**\n * @file GameSM.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-05\n */\n\nimport { singleton } from \"../../Libs/Injects/decorators/singleton\";\nimport { inject } from \"../../Libs/Injects/inject\";\nimport { FiniteStateMachine } from \"../../Libs/StateMachine/FiniteStateMachine\";\nimport { GameContext } from \"./GameContext\";\nimport { GameFillField } from \"./States/GameFillField\";\nimport { GameIdle } from \"./States/GameIdle\";\nimport { GameFieldItem } from \"../../GameField/GameFieldItem\";\nimport { SelectedItemData } from \"../Base/SelectedItemData\";\nimport { GameSearchCluster } from \"./States/GameSearchCluster\";\nimport { Vec2, Node, Prefab } from \"cc\";\nimport { GameRemoveCluster } from \"./States/GameRemoveCluster\";\nimport { GameCollapseField } from \"./States/GameCollapseField\";\nimport { GameRefillGrid } from \"./States/GameRefillGrid\";\nimport { GameCollectAllClusters } from \"./States/GameCollectAllClusters\";\nimport { GameReshuffleField } from \"./States/GameReshuffleField\";\nimport { GameOver } from \"./States/GameOver\";\nimport { GameCalculateScore } from \"./States/GameCalculateScore\";\nimport { GameTool } from \"../EnumGameTool\";\nimport { GameBombActivation } from \"./States/GameBombActivation\";\nimport { GameDropBooster } from \"./States/GameDropBooster\";\nimport { GameLandDrop } from \"./States/GameLandDrop\";\nimport { NukeBombActivated } from \"./States/Boosters/NukeBombActivated\";\nimport { Column1RocketActivated } from \"./States/Boosters/Column1RocketActivated\";\nimport { Column2RocketActivated } from \"./States/Boosters/Column2RocketActivated\";\nimport { Row1RocketActivated } from \"./States/Boosters/Row1RocketActivated\";\nimport { Row2RocketActivated } from \"./States/Boosters/Row2RocketActivated\";\n\n/**\n * Game State Machine class that manages the game's state transitions and logic.\n * This class extends the FiniteStateMachine to handle various game states like\n * idle, searching for clusters, removing clusters, dropping boosters, etc.\n * It coordinates the flow between different game states and maintains the overall\n * game progression.\n */\n@singleton()\nexport class GameStateMachine extends FiniteStateMachine<GameContext> \n{   \n    /**\n     * Initializes the game state machine with the game context.\n     */\n    constructor() {\n        const context: GameContext = inject(GameContext);    \n        super(context);\n    }\n\n    /**\n     * Sets the item prefabs for the game.\n     * @param items The item prefabs to set\n     */\n    public setItems(items: Prefab[]): void {\n        if(this.context.itemPrefabs != null){\n            throw new Error('Items already set');\n        }\n        this.context.itemPrefabs = items;\n    }\n\n    /**\n     * Sets the drop prefabs for the game.\n     * @param items The drop prefabs to set\n     */\n    public setDrops(items: Prefab[]): void {\n        if(this.context.dropPrefabs != null){\n            throw new Error('Drops already set');\n        }\n        this.context.dropPrefabs = items;\n    }\n\n    /**\n     * Sets up the game states.\n     */\n    private async setupStates() : Promise<void> {\n        this.addState(new GameFillField());\n        this.addState(new GameIdle());\n        this.addState(new GameSearchCluster());\n        this.addState(new GameRemoveCluster());\n        this.addState(new GameCollapseField());\n        this.addState(new GameRefillGrid());\n        this.addState(new GameCollectAllClusters());\n        this.addState(new GameReshuffleField());\n        this.addState(new GameOver());\n        this.addState(new GameCalculateScore());\n        this.addState(new GameBombActivation());\n        this.addState(new GameDropBooster());\n        this.addState(new GameLandDrop());\n        this.addState(new NukeBombActivated());\n        this.addState(new Column1RocketActivated());\n        this.addState(new Column2RocketActivated());\n        this.addState(new Row1RocketActivated());\n        this.addState(new Row2RocketActivated());        \n    }\n    \n    /**\n     * Sets up the game state transitions.\n     */\n    private async setupTransitions() : Promise<void> {\n        this.addTransition({\n            from: GameFillField.STATE_NAME,\n            to: GameIdle.STATE_NAME,\n            guardCondition: (context) => {\n                return context.needReshuffle == false \n                &&context.items.length > 0 \n                && context.itemsPool.length >0 \n                && context.gameNode != null;\n            },\n        });\n\n        // init -> Game Over\n        this.addTransition({\n            from: GameFillField.STATE_NAME,\n            to: GameOver.STATE_NAME,\n            guardCondition: (context) => {\n                return context.needReshuffle == true \n                && context.canReshuffle == false;\n            },\n        });\n        \n        // IDLE -> Search for cluster\n        this.addTransition({\n            from: GameIdle.STATE_NAME,\n            to: GameSearchCluster.STATE_NAME,\n            guardCondition: (context) => {\n                return context.selectedItem != null\n                && context.currentTool == GameTool.SELECTOR\n                && !context.selectedItem.item.IsBooster;\n            },\n        });\n\n        // IDLE -> Bomb\n        this.addTransition({\n            from: GameIdle.STATE_NAME,\n            to: GameBombActivation.STATE_NAME,\n            guardCondition: (context) => {\n                return context.selectedItem != null\n                && (context.currentTool == GameTool.BOMB_1 \n                || context.currentTool == GameTool.BOMB_2);\n            },\n        });\n\n        // IDLE -> Nuke Bomb\n        this.addTransition({\n            from: GameIdle.STATE_NAME,\n            to: NukeBombActivated.STATE_NAME,\n            guardCondition: (context) => {\n                return context.selectedItem != null\n                && context.currentTool == GameTool.SELECTOR\n                && context.selectedItem.item.ItemType == GameTool.NUKE_BOMB;\n            },\n        });\n\n        // Bomb -> Calculation\n        this.addTransition({\n            from: NukeBombActivated.STATE_NAME,\n            to: GameCalculateScore.STATE_NAME\n        });\n\n\n        // IDLE -> Row Rocket 1\n        this.addTransition({\n            from: GameIdle.STATE_NAME,\n            to: Row1RocketActivated.STATE_NAME,\n            guardCondition: (context) => {\n                return context.selectedItem != null\n                && context.currentTool == GameTool.SELECTOR\n                && context.selectedItem.item.ItemType == GameTool.ROW_ROCKET_1;\n            },\n        });\n\n        // IDLE -> Row Rocket 2\n        this.addTransition({\n            from: GameIdle.STATE_NAME,\n            to: Row2RocketActivated.STATE_NAME,\n            guardCondition: (context) => {\n                return context.selectedItem != null\n                && context.currentTool == GameTool.SELECTOR\n                && context.selectedItem.item.ItemType == GameTool.ROW_ROCKET_2;\n            },\n        });\n\n        // IDLE -> Column Rocket 1\n        this.addTransition({\n            from: GameIdle.STATE_NAME,\n            to: Column1RocketActivated.STATE_NAME,\n            guardCondition: (context) => {\n                return context.selectedItem != null\n                && context.currentTool == GameTool.SELECTOR\n                && context.selectedItem.item.ItemType == GameTool.COL_ROCKET_1;\n            },\n        });\n\n        // IDLE -> Column Rocket 2\n        this.addTransition({\n            from: GameIdle.STATE_NAME,\n            to: Column2RocketActivated.STATE_NAME,\n            guardCondition: (context) => {\n                return context.selectedItem != null\n                && context.currentTool == GameTool.SELECTOR\n                && context.selectedItem.item.ItemType == GameTool.COL_ROCKET_2;\n            },\n        });\n\n        // Row Rocket 1 -> Calculation\n        this.addTransition({\n            from: Row1RocketActivated.STATE_NAME,\n            to: GameCalculateScore.STATE_NAME\n        });\n\n        // Row Rocket 2 -> Calculation\n        this.addTransition({\n            from: Row2RocketActivated.STATE_NAME,\n            to: GameCalculateScore.STATE_NAME\n        });\n\n        // Column Rocket 1 -> Calculation\n        this.addTransition({\n            from: Column1RocketActivated.STATE_NAME,\n            to: GameCalculateScore.STATE_NAME\n        });\n\n        // Column Rocket 2 -> Calculation\n        this.addTransition({\n            from: Column2RocketActivated.STATE_NAME,\n            to: GameCalculateScore.STATE_NAME\n        });\n\n\n        // Bomb -> Calculation\n        this.addTransition({\n            from: GameBombActivation.STATE_NAME,\n            to: GameCalculateScore.STATE_NAME,\n            guardCondition: (context) => {\n                return !context.skipMove;\n            },\n        });\n\n        this.addTransition({\n            from: GameBombActivation.STATE_NAME,\n            to: GameIdle.STATE_NAME,\n            guardCondition: (context) => {\n                return context.skipMove;\n            },\n        });\n\n        // IDLE -> Search for cluster\n        this.addTransition({\n            from: GameIdle.STATE_NAME,\n            to: GameOver.STATE_NAME,\n            guardCondition: (context) => {\n                return context.outOfMoves || context.pointTargetReached;\n            },\n        });\n\n        // Search for cluster -> IDLE\n        this.addTransition({\n            from: GameSearchCluster.STATE_NAME,\n            to: GameIdle.STATE_NAME,\n            guardCondition: (context) => {\n                return context.currentCluster == null;\n            },\n        });\n\n        // Search for cluster -> Calculate score\n        this.addTransition({\n            from: GameSearchCluster.STATE_NAME,\n            to: GameCalculateScore.STATE_NAME,\n            guardCondition: (context) => {\n                return context.currentCluster != null;\n            },\n        });\n\n        // Calculate score -> Remove cluster\n        this.addTransition({\n            from: GameCalculateScore.STATE_NAME,\n            to: GameDropBooster.STATE_NAME\n        });\n\n        // Calculate score -> Remove cluster\n        this.addTransition({\n            from: GameDropBooster.STATE_NAME,\n            to: GameRemoveCluster.STATE_NAME\n        });        \n\n        // Remove cluster -> Collapse\n        this.addTransition({\n            from: GameRemoveCluster.STATE_NAME,\n            to: GameCollapseField.STATE_NAME,\n            guardCondition: (context) => {\n                return context.currentCluster == null;\n            },\n        });\n        \n        // Collapse -> Refill\n        this.addTransition({\n            from: GameCollapseField.STATE_NAME,\n            to: GameRefillGrid.STATE_NAME,\n            guardCondition: (context) => {\n                return context.isMovingItems == false;\n            },\n        });\n\n        // Refill -> Collect\n        this.addTransition({\n            from: GameRefillGrid.STATE_NAME,\n            to: GameCollectAllClusters.STATE_NAME,\n            guardCondition: (context) => {\n                return context.isMovingItems == false\n                && context.droppedItems.length == 0;\n            },\n        });\n\n         // Refill -> Drop\n         this.addTransition({\n            from: GameRefillGrid.STATE_NAME,\n            to: GameLandDrop.STATE_NAME,\n            guardCondition: (context) => {\n                return context.isMovingItems == false\n                && context.droppedItems.length != 0;\n            },\n        });\n\n        // Drop -> Collect\n        this.addTransition({\n            from: GameLandDrop.STATE_NAME,\n            to: GameCollectAllClusters.STATE_NAME\n        });\n\n        // Collect -> Reshuffle\n        this.addTransition({\n            from: GameCollectAllClusters.STATE_NAME,\n            to: GameReshuffleField.STATE_NAME,\n            guardCondition: (context) => {\n                return context.needReshuffle \n                && context.canReshuffle == true;\n            },\n        });\n\n        // Reshuffle -> Collect\n        this.addTransition({\n            from: GameReshuffleField.STATE_NAME,\n            to: GameCollectAllClusters.STATE_NAME,\n            guardCondition: (context) => {\n                return context.needReshuffle\n                && context.canReshuffle == true;\n            },\n        });\n        \n        // Collect -> IDLE\n        this.addTransition({\n            from: GameCollectAllClusters.STATE_NAME,\n            to: GameIdle.STATE_NAME,\n            guardCondition: (context) => {\n                return context.needReshuffle == false\n                && context.canReshuffle == true;\n            },\n        });\n\n        // Reshuffle -> Game Over\n        this.addTransition({\n            from: GameReshuffleField.STATE_NAME,\n            to: GameOver.STATE_NAME,\n            guardCondition: (context) => {\n                return context.needReshuffle\n                && context.canReshuffle == false;\n            },\n        });\n\n        // Reshuffle -> IDLE\n        this.addTransition({\n            from: GameReshuffleField.STATE_NAME,\n            to: GameIdle.STATE_NAME,\n            guardCondition: (context) => {\n                return context.needReshuffle == false\n                && context.canReshuffle == true;\n            },\n        });\n\n        await this.setInitialState(GameFillField.STATE_NAME);\n    }\n\n    /**\n     * Binds the game state machine to a node.\n     * @param node The node to bind to\n     */\n    public async bind(node: Node): Promise<void> {\n        this.context.gameNode = node;\n        await this.setupStates();\n        await this.setupTransitions();\n        this.context.onClickedItemCb = this.onItemClicked.bind(this);\n    }\n\n    /**\n     * Unbinds the game state machine from a node.\n     */\n    public unbind() {\n        this.context.gameNode = null;\n    }\n\n    /**\n     * Handles an item click event.\n     * @param clickedItem The item that was clicked\n     */\n    public onItemClicked(clickedItem: GameFieldItem): void {\n         // Find the position of clicked item in the grid\n         for (let i = 0; i < this.context.items.length; i++) {\n            for (let j = 0; j < this.context.items[i].length; j++) {\n                if (this.context.items[i][j] === clickedItem) {\n                    var data = new SelectedItemData();\n                    data.position = new Vec2(i, j);\n                    data.item = clickedItem;\n                    this.context.gameNode.emit(SelectedItemData.SELECTED_EVENT, data);\n                }\n            }\n        }\n    }\n}","/**\n * @file IClusterSeekerService.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-05\n * \n * Interface for the cluster seeking service that handles finding groups of matching items\n * in the game field. The service is responsible for identifying connected items that share\n * the same property value.\n * A cluster is defined as a group of adjacent items of the same type.\n */\nimport { GameFieldItem } from \"../../GameField/GameFieldItem\";\n\nexport interface IClusterSeekerService {\n    /**\n     * Collects a cluster of connected items starting from a specific position\n     * @param items The 2D array of game field items to search in\n     * @param minClusterSize The minimum number of connected items required to form a valid cluster\n     * @param startX The starting X coordinate to begin the cluster search\n     * @param startY The starting Y coordinate to begin the cluster search\n     * @param propertyName The name of the property to match items by (e.g., 'color', 'type')\n     * @returns Array of GameFieldItems that form a cluster, or empty array if cluster size is less than minimum\n     */\n    CollectCluster(items: GameFieldItem[][], minClusterSize: number, startX: number, startY: number, propertyName: string): GameFieldItem[];\n\n    /**\n     * Finds all valid clusters in the game field\n     * @param items The 2D array of game field items to search in\n     * @param minClusterSize The minimum number of connected items required to form a valid cluster\n     * @param propertyName The name of the property to match items by (e.g., 'color', 'type')\n     * @returns Array of clusters, where each cluster is an array of GameFieldItems\n     */\n    FindAllClusters(items: GameFieldItem[][], minClusterSize: number, propertyName: string): GameFieldItem[][];\n}","/**\n * Interface defining the service responsible for managing game-wide configuration settings.\n * This service provides access to various game parameters and settings that affect gameplay.\n */\nexport interface IGameConfigurationService {\n    /**\n     * The minimum number of items required to form a valid cluster.\n     */\n    readonly minClusterSize: number;\n\n    /**\n     * The number of reshuffles allowed in the game.\n     */\n    get reshuffles(): number;\n\n    /**\n     * The initial number of points awarded to the player at the start of the game.\n     */\n    get startPointsAmount(): number;\n    set startPointsAmount(value: number);\n}","/**\n * @file IGameContext.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-05\n */\n\nimport { Prefab, Node } from \"cc\";\nimport { GameFieldItem } from \"../../../../GameField/GameFieldItem\";\nimport { IGameConfigurationService } from \"../../../../Services/Interfaces/IGameConfigurationService\";\nimport { ILevelConfigurationService } from \"../../../../Services/Interfaces/ILevelConfiguration\";\nimport { SelectedItemData } from \"../../../Base/SelectedItemData\";\nimport { GameTool } from \"../../../EnumGameTool\";\n\n/**\n * Interface defining the contract for the game context.\n * Provides access to essential game state information and operations\n * that are needed across different components of the game.\n */\nexport interface IGameContext {\n\n    /**\n     * Gets or sets the current game tool being used.\n     */\n    get currentTool(): GameTool;\n    set currentTool(value: GameTool);\n\n    /**\n     * Flag indicating if the player is out of moves.\n     */\n    get outOfMoves(): boolean;\n\n    /**\n     * Flag indicating if the point target has been reached.\n     */\n    get pointTargetReached(): boolean;\n\n    /**\n     * Gets or sets the current game score.\n     */\n    get gameScore(): number\n    set gameScore(value: number)\n\n    /**\n     * Gets or sets the current game field items in a 2D array.\n     */\n    get items(): GameFieldItem[][];\n    set items(value: GameFieldItem[][]);\n\n    /**\n     * Gets the level configuration service.\n     */\n    get lvlConf(): ILevelConfigurationService;\n\n    /**\n     * Gets the game configuration service.\n     */\n    get gameConf(): IGameConfigurationService;\n\n    /**\n     * Gets or sets the prefabs for game items.\n     */\n    get itemPrefabs(): Prefab[];\n    set itemPrefabs(value: Prefab[]);\n\n    /**\n     * Gets or sets the pool of game items.\n     */\n    get itemsPool(): GameFieldItem[];\n    set itemsPool(value: GameFieldItem[]);\n\n    /**\n     * Gets or sets the game node.\n     */\n    get gameNode(): Node ;\n    set gameNode(value: Node);\n\n    /**\n     * Gets or sets the currently selected item on the field.\n     */\n    get selectedItem(): SelectedItemData ;\n    set selectedItem(value: SelectedItemData) ;\n\n    /**\n     * Gets or sets the current cluster of items being processed.\n     */\n    get currentCluster(): GameFieldItem[];\n    set currentCluster(value: GameFieldItem[]);\n\n    /**\n     * Flag indicating if items are currently being moved.\n     */\n    get isMovingItems(): boolean;\n    set isMovingItems(value: boolean);\n\n    /**\n     * Gets or sets the pool of dropped items.\n     */\n    get dropsPool(): GameFieldItem[];\n    set dropsPool(value: GameFieldItem[]);\n\n    /**\n     * Gets or sets the prefabs for dropped items.\n     */\n    get dropPrefabs(): Prefab[];\n    set dropPrefabs(value: Prefab[]);\n\n    /**\n     * Gets or sets the dropped items.\n     */\n    get droppedItems(): SelectedItemData[];\n    set droppedItems(value: SelectedItemData[]);\n\n    /**\n     * Flag indicating if the player should skip a move.\n     */\n    get skipMove(): boolean;\n    set skipMove(value: boolean);\n}","/**\n * @file IGameStateObserver.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-05\n */\n\n/**\n * Interface for observing game state changes.\n * Implement this interface to receive notifications when the game state changes.\n */\nexport interface IGameStateObserver {\n    /**\n     * Called when the game state changes.\n     * @param stateName The name of the new state\n     */\n    onStateChanged(stateName: string): void;\n}","/**\n * @file IGameStatsObserver.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-05\n */\n\n/**\n * Interface for observing game statistics changes.\n * Implement this interface to receive notifications when game stats like score\n * and moves change during gameplay.\n */\nexport interface IGameStatsObserver {\n    /**\n     * Called when the game score changes.\n     * @param newScore The updated score value\n     */\n    onScoreChanged(newScore: number): void;\n\n    /**\n     * Called when the number of moves changes.\n     * @param newMoves The updated moves value\n     */\n    onMovesChanged(newMoves: number): void;\n}","/**\n * @file IGameToolObserver.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-05\n */\n\nimport { GameTool } from \"../../../EnumGameTool\";\n\n/**\n * Interface for observing game tool changes.\n * Implement this interface to receive notifications when the active game tool\n * (like selector, bomb, rocket, etc.) changes during gameplay.\n */\nexport interface IGameToolObserver {\n    /**\n     * Called when the active game tool changes.\n     * @param newTool The newly selected game tool\n     */\n    onToolChanged(newTool: GameTool): void;\n}","/**\n * @file IGuard.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-02\n */\n\nexport interface IGuard {\n    (data?: any): boolean;\n}","import { Dictionary } from \"../../Libs/Injects/shared/Dictionary\";\nimport { GameFieldItem } from \"../../GameField/GameFieldItem\";\n\n/**\n * Interface defining the service responsible for managing level-specific configuration settings.\n * This service provides access to level parameters such as target score, maximum moves,\n * and level-specific game field configurations.\n */\nexport interface ILevelConfigurationService {\n    /**\n     * The width of the game field for this level.\n     * @returns The width of the field in cells\n     */\n    get width(): number ;\n\n    /**\n     * The height of the game field for this level.\n     * @returns The height of the field in cells\n     */\n    get height(): number;\n\n    /**\n     * The width of a single cell in the game field.\n     * @returns The width of a cell in pixels\n     */\n    get cellWidth(): number;\n\n    /**\n     * The height of a single cell in the game field.\n     * @returns The height of a cell in pixels\n     */\n    get cellHeight(): number;\n\n    /**\n     * The paytable configuration for this level.\n     * @returns A dictionary mapping game field items to their respective scores\n     */\n    get paytable(): Record<string, number>;\n\n    /**\n     * The maximum number of moves allowed in the level.\n     */\n    readonly maxMoves: number;\n\n    /**\n     * The target score required to complete the level.\n     */\n    readonly targetScore: number;\n\n    /**\n     * The bomb radius configuration for this level.\n     * @returns A dictionary mapping bomb types to their respective explosion radii\n     */\n    get bombRadius(): Record<string, number>;\n\n    /**\n     * The drops configuration for this level.\n     * @returns A dictionary mapping drop probabilities to their respective game field items\n     */\n    get drops(): Record<number, string[]> ;\n}","/**\n * @file IMapping.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-02\n */\n\nimport {IGuarded} from \"./IGuarded\";\n\nexport interface IMapping extends IGuarded<IMapping> {\n    once(): IMapping;\n\n    isOnce(): boolean;\n\n    createFilter(filterFields?: Object): Object;\n}\n","/**\n * @file inject.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-02\n */\n\nimport {IInjectable} from \"./interfaces/IInjectable\";\nimport {Class} from \"./type/Type\";\nimport {Kernel} from \"./Kernel\";\n\nexport const kernel = new Kernel();\n\nexport function inject<K extends T, T extends IInjectable>(constructor: Class<T>): K {\n    return kernel.get(constructor);\n}\n","/**\n * @file injectable.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-02\n */\n\nimport {InjectionMapping} from \"../InjectionMapping\";\nimport {classMap} from \"../dependency-injection\";\nimport {Constructor} from \"../type/Type\";\n\nexport function injectable<T>(): (target: Constructor<T>) => void {\n    return function (target: Constructor<T>): void {\n        const result: InjectionMapping<T> = <InjectionMapping<T>>classMap.get(target);\n        if (!result) {\n            new InjectionMapping(classMap, target);\n        }\n    };\n}\n","/**\n * @file InjectionMapping.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-02\n */\n\nimport {IInjectable} from \"./interfaces/IInjectable\";\nimport {Class, Constructor} from \"./type/Type\";\nimport {Dictionary} from \"./shared/Dictionary\";\nimport {Mapping} from \"./shared/Mapping\";\n\nexport type KernelClassesMap = Dictionary<Class<IInjectable>, InjectionMapping<IInjectable>>;\n\nexport class InjectionMapping<TBase extends IInjectable, TResult extends TBase = TBase> extends Mapping\n{\n    private instance: TResult = null;\n    private isSingleton: boolean = false;\n    protected _instanceResultConstructor: Constructor<TResult> = null;\n    private args: any[] = [];\n\n    private _isForceCreation: boolean = false;\n\n    constructor(private classesMap: KernelClassesMap, initialConstructor: Class<TBase>) {\n        super();\n        this.to(initialConstructor as any);\n    }\n\n    getInstance(): TResult {\n        if (this.isSingleton) {\n            if (!this.instance) {\n                this.instance = this.createInstance();\n                // if (__DEV__) {\n                //     // Development tool for create a global link to the class\n                //     DebugUtils.mapObjectToGlobalId(this.instance, this.instance.constructor.name, \"s\");\n                // }\n            }\n            return this.instance;\n        }\n        return this.createInstance();\n    }\n\n    createInstance(): TResult {\n        const constructor = this.getConstructor();\n        return new constructor(...this.args);\n    }\n\n    getConstructor(): Constructor<TResult> {\n        if (this._instanceResultConstructor) {\n            return this._instanceResultConstructor;\n        }\n\n        throw new Error(\"Constructor is not bound!\");\n    }\n\n    hasInstance(): boolean {\n        return !!this.instance && this.isSingleton;\n    }\n\n    destroyInstance(): void {\n        this.instance = null;\n    }\n\n    asSingleton(): InjectionMapping<TBase, TResult> {\n        this.isSingleton = true;\n        return this;\n    }\n\n    to<TResultOverride extends TBase>(instanceConstructor: Constructor<TResultOverride>): InjectionMapping<TBase, TResultOverride> {\n\n        if (!instanceConstructor) {\n            throw new Error(\"There is an undefined constructor you are trying bind to.\");\n        }\n\n        const newThis = this.existentialType<TResultOverride>(this);\n        const other = this.classesMap.get(instanceConstructor);\n        if (other) {\n            console.warn(\"Constructor already bound \" + instanceConstructor.name);\n        }\n        newThis._instanceResultConstructor = instanceConstructor;\n        newThis.instance = null;\n        this.classesMap.add(instanceConstructor, this);\n\n        return newThis;\n    }\n\n    isForceCreation(): boolean {\n        return this._isForceCreation;\n    }\n\n    forceCreation(): InjectionMapping<TBase, TResult> {\n        this._isForceCreation = true;\n        return this;\n    }\n\n    protected existentialType<TResultOverride extends TBase>(oldThis: InjectionMapping<TBase, TResult>): InjectionMapping<TBase, TResultOverride> {\n        return <InjectionMapping<TBase, TResultOverride>>(oldThis as any);\n    }\n\n}\n","import { GameTool } from \"../../Game/EnumGameTool\";\n\n/**\n * Interface defining an observer for player inventory changes.\n * Implementers of this interface will be notified when changes occur\n * to the player's inventory of tools and items.\n */\nexport interface IPlayerInventoryObserver {\n    /**\n     * Called when the inventory changes for a specific tool.\n     * @param tool The tool type that was changed\n     * @param amount The new amount of the tool in the inventory\n     */\n    onInventoryChanged(tool: GameTool, amount: number): void;\n}\n","import { GameTool } from \"../../Game/EnumGameTool\";\nimport { IPlayerInventoryObserver } from \"../IPlayerInventoryObserver\";\n\n/**\n * Interface defining the service responsible for managing the player's inventory.\n * This service handles the tracking and modification of game tools and items\n * that the player has available for use during gameplay.\n */\nexport interface IPlayerInventoryService {\n    /**\n     * Gets the current amount of a specific tool in the inventory.\n     * @param tool The tool type to check\n     * @returns The quantity of the specified tool\n     */\n    getAmount(tool: GameTool): number;\n\n    /**\n     * Adds a specified amount of a tool to the inventory.\n     * @param tool The tool type to add\n     * @param amount The amount to add (default is 1)\n     */\n    addAmount(tool: GameTool, amount?: number): void;\n\n    /**\n     * Removes a specified amount of a tool from the inventory.\n     * @param tool The tool type to remove\n     * @param amount The amount to remove (default is 1)\n     * @returns True if the removal was successful, false if there weren't enough tools\n     */\n    removeAmount(tool: GameTool, amount?: number): boolean;\n\n    /**\n     * Adds an observer to be notified of inventory changes.\n     * @param observer The observer to add\n     */\n    addObserver(observer: IPlayerInventoryObserver): void;\n\n    /**\n     * Removes an observer from being notified of inventory changes.\n     * @param observer The observer to remove\n     */\n    removeObserver(observer: IPlayerInventoryObserver): void;\n}","/**\n * @file ISelectedItemData.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-05\n */\n\nimport { Vec2 } from \"cc\";\nimport { GameFieldItem } from \"../../GameField/GameFieldItem\";\n\n/**\n * Interface defining the contract for selected item data.\n * Provides access to essential information about a selected game item,\n * including its position and properties.\n */\nexport interface ISelectedItemData {\n    /** The position of the selected item in the grid */\n    get position(): Vec2;\n    set position(value: Vec2);\n\n    /** Reference to the actual game field item */\n    get item(): GameFieldItem;\n    set item(value: GameFieldItem);\n}","/**\n * @file IState.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-04\n */\n\nexport interface IState<TContext> {\n    name: string;\n    onEnter?: (context: TContext) => Promise<void>;\n    onExit?: (context: TContext) => Promise<void>;\n    update?: (context: TContext) => Promise<void>;\n}\n","/**\n * @file ITransition.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-04\n */\n\nexport interface ITransition<TContext> {\n    from: string;\n    to: string;\n    guardCondition?: (context: TContext) => boolean;\n}\n","/**\n * @file IUIService.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-05\n */\n\nimport { Node, Prefab } from \"cc\";\nimport { Paddings } from \"../../UI/Paddings\";\n\n/**\n * Interface defining the service responsible for managing UI elements.\n * This service handles the creation, display, and management of UI components\n * such as windows, popups, and other interface elements.\n */\nexport interface IUIService {\n   /**\n     * Resets the size of the given UI elements based on the level configuration and paddings.\n     * @param scaleTargets The UI elements to reset the size for\n     * @param paddings The paddings to apply to the UI elements\n     */\n   resetSize(scaleTargets: Node[], paddings: Paddings | null): Promise<void> \n}","/**\n * @file Kernel.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-02\n */\n\nimport {InjectionMapping} from \"./InjectionMapping\";\nimport {IInjectable} from \"./interfaces/IInjectable\";\nimport {classMap} from \"./dependency-injection\";\nimport {Class} from \"./type/Type\";\n\nexport class Kernel\n{\n/*\n    private eventMap: EventActionMap;\n    private viewMap: ViewMap;\n    private mediatorMap: MediatorMap;\n\n    constructor(eventMap: EventActionMap, mediatorMap: MediatorMap, viewMap: ViewMap) {\n        this.eventMap = eventMap;\n        this.mediatorMap = mediatorMap;\n        this.viewMap = viewMap;\n    }\n\n    public bindEvent(eventName: string): EventActionMap {\n        return this.eventMap.bindEvent(eventName);\n    }\n\n    public unBindEvent(eventName: string): EventActionMap {\n        return this.eventMap.unBindEvent(eventName);\n    }\n\n    public unBindAllActionsFromEvent(eventName: string): void {\n        return this.eventMap.unBindAllActionsFromEvent(eventName);\n    }\n\n    public bindView(view: Constructor<IView>): ViewMap {\n        return this.viewMap.bindView(view);\n    }\n\n    public bindMediator(mediator: Constructor<IMediator>): MediatorMap {\n        return this.mediatorMap.bindMediator(mediator);\n    }\n*/\n    public bind<T extends IInjectable>(constructor: Class<T>): InjectionMapping<T> {\n\n        let result: InjectionMapping<T> = this.getBinding(constructor);\n        if (!result) {\n            result = new InjectionMapping(classMap, constructor);\n        }\n\n        return result;\n    }\n\n    public get<K extends T, T extends IInjectable>(constructor: Class<T>): K {\n        const mapping: InjectionMapping<IInjectable> = classMap.get(constructor);\n\n        if (!mapping) {\n            throw new Error(\"There is no any binding for \" + constructor + \" please bind the class before inject()\");\n        }\n\n        return mapping.getInstance() as K;\n    }\n\n    public getBinding<T extends IInjectable>(constructor: Class<T>): InjectionMapping<T> {\n        if (!constructor) {\n            throw Error(\"you are trying to get undefined constructor\");\n        }\n\n        return <InjectionMapping<T>>classMap.get(constructor);\n    }\n\n    public activate(): void {\n        const injectionsList: InjectionMapping<IInjectable>[] = [];\n        classMap.forEach(item => injectionsList.push(item));\n\n        //Then activate\n        injectionsList.forEach(\n            (item: InjectionMapping<IInjectable>) => {\n                if (item.isForceCreation()) {\n                    item.getInstance();\n                }\n            }\n        );\n    }\n/*\n    public activateEventMap(): void {\n        this.eventMap.activate();\n    }\n */\n}\n","import { GameFieldItem } from \"../GameField/GameFieldItem\";\nimport { singleton } from \"../Libs/Injects/decorators/singleton\";\nimport { ILevelConfigurationService } from \"./Interfaces/ILevelConfiguration\";\n\n/**\n * Service that provides level-specific configuration settings.\n * This service manages settings like grid dimensions, scoring rules,\n * tool properties, and level completion criteria.\n */\n@singleton()\nexport class LevelConfigurationService implements ILevelConfigurationService {\n\n    /** Width of the game grid in cells */\n    private readonly _width: number = 10;\n    /** Height of the game grid in cells */\n    private readonly _height: number = 10;\n    /** Width of each cell in pixels */\n    private readonly _cellWidth: number = 171;\n    /** Height of each cell in pixels */\n    private readonly _cellHeight: number = 192;\n    /** Map of points awarded for each item in the game */\n    private readonly _paytable: Record<string, number> = {\n        \"BlueItem\": 10,\n        \"GreenItem\": 20,\n        \"PurpleItem\": 30,\n        \"RedItem\": 40,\n        \"YellowItem\": 50,\n        // Boosters\n        \"COL_ROCKET_1\": 60,\n        \"ROW_ROCKET_1\": 60,\n        \"COL_ROCKET_2\": 60,\n        \"ROW_ROCKET_2\": 60,\n        \"NUKE_BOMB\": 100\n    };\n\n    /**\n     * Map of items that can be dropped at specific levels.\n     */\n    private readonly _drops: Record<number, string[]> = {\n        6: [\"COL_ROCKET_1\", \"ROW_ROCKET_1\"],\n        7: [\"COL_ROCKET_2\", \"ROW_ROCKET_2\"],\n        8: [\"NUKE_BOMB\"],\n    };\n\n    /** Maximum moves allowed in the level */\n    private readonly _maxMoves: number = 15;\n    /** Target score to complete the level */\n    private readonly _targetScore: number = 15500;\n\n    /**\n     * Map of bomb radiuses for different tools.\n     */\n    private readonly _bombRadius: Record<string, number> = {\n        \"BOMB_1\": 1,\n        \"BOMB_2\": 2,\n    };\n\n    /**\n     * Gets the map of items that can be dropped at specific levels.\n     */\n    public get drops(): Record<number, string[]> {\n        return this._drops;\n    }\n\n    /**\n     * Gets the map of bomb radiuses.\n     */\n    public get bombRadius(): Record<string, number> {\n        return this._bombRadius;\n    }\n\n    /**\n     * Gets the maximum moves allowed.\n     */\n    public get maxMoves(): number{\n        return this._maxMoves;\n    }\n    \n    /**\n     * Gets the target score for level completion.\n     */\n    public get targetScore(): number{\n        return this._targetScore;\n    }\n\n    /**\n     * Gets the map of points awarded for each item.\n     */\n    public get paytable(): Record<string, number> {\n        return this._paytable;\n    }\n    \n    /**\n     * Gets the width of the game grid.\n     */\n    public get width(): number{\n        return this._width;\n    }\n\n    /**\n     * Gets the height of the game grid.\n     */\n    public get height(): number{\n        return this._height;\n    }\n\n    /**\n     * Gets the width of each cell.\n     */\n    public get cellWidth(): number{\n        return this._cellWidth;\n    }\n    /**\n     * Gets the height of each cell.\n     */\n    public get cellHeight(): number{\n        return this._cellHeight;\n    }\n}","/**\n * @file Mapping.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-02\n */\n\nimport {IGuard} from \"../interfaces/IGuard\";\nimport {IMapping} from \"../interfaces/IMapping\";\n\nexport class Mapping implements IMapping {\n    private guards: IGuard[] = [];\n    private executeOnce: boolean = false;\n\n    isOnce(): boolean {\n        return this.executeOnce;\n    }\n\n    once(): IMapping {\n        this.executeOnce = true;\n        return this;\n    }\n\n    withGuards(...guards: any[]): IMapping {\n        Array.prototype.push.apply(this.guards, guards);\n        return this;\n    }\n\n    executionAllowedByGuards(data?: any): boolean {\n\n        for (const guard of this.guards) {\n            if (!guard(data)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    createFilter(filterFields?: Object & { [key: string]: any }): Object {\n        if (!filterFields) {\n            return {};\n        }\n        const result: { [key: string]: any } = {};\n        const propertiesInMapping: string[] = Mapping.extractAllProperties(this);\n        for (const property of propertiesInMapping) {\n            if (property in filterFields && typeof (this as any)[property] === typeof filterFields[property]) {\n                result[property] = filterFields[property];\n            }\n        }\n        return result;\n\n    }\n\n    static extractAllProperties(mapping: IMapping): string[] {\n        const result: string[] = [];\n\n        for (const key in mapping) {\n            if (mapping.hasOwnProperty(key) && key !== \"guards\" && key !== \"executeOnce\") {\n                result.push(key);\n            }\n        }\n        return result;\n    }\n\n}\n","/**\n * @file NukeBombActivated.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-05\n */\n\nimport { GameFieldItem } from \"../../../../GameField/GameFieldItem\";\nimport { BaseState } from \"../../../../Libs/StateMachine/BaseState\";\nimport { GameContext } from \"../../GameContext\";\n\n/**\n * Represents the state when a nuke bomb booster is activated.\n * This booster is the most powerful, clearing all items from the game field\n * in a single explosion. It provides a strategic option for players to completely\n * reset the field when they are in a difficult situation.\n */\nexport class NukeBombActivated extends BaseState<GameContext> {\n    public static readonly STATE_NAME: string = 'NukeBombActivated';\n\n    constructor() {\n        super(NukeBombActivated.STATE_NAME);\n    }\n\n    /**\n     * Handles entering the nuke bomb activation state.\n     * Collects all items on the field for removal, triggering a complete field clear.\n     * @param context - The game context containing the current game state and field data\n     */\n    public async onEnter(context: GameContext): Promise<void> {\n        const items = context.items;\n        const cluster: GameFieldItem[] = [];\n\n        for (let i = 0; i < items.length; i++) {\n            for (let j = 0; j < items[i].length; j++) {\n                cluster.push(items[i][j]);\n            }\n        }\n        context.currentCluster = cluster;\n    }\n}","import { _decorator} from \"cc\";\nconst { ccclass, property } = _decorator;\n\n/**\n * Class representing padding values for UI elements.\n * This class provides a structured way to define and manage padding values\n * for top, bottom, left, and right sides of UI components.\n */\n@ccclass('Paddings')\nexport class Paddings {\n    /** Padding value for the left side */\n    @property({ \n        visible: true, \n        serializable: true,\n        tooltip: 'Padding value for the left side of the UI element'\n    })\n    private _left: number = 0;\n    /** Padding value for the bottom side */\n    @property({ \n        visible: true, \n        serializable: true,\n        tooltip: 'Padding value for the bottom side of the UI element'\n    })\n    private _bottom: number = 0;\n    /** Padding value for the right side */\n    @property({ \n        visible: true, \n        serializable: true,\n        tooltip: 'Padding value for the right side of the UI element'\n    })\n    private _right: number = 0;\n    /** Padding value for the top side */\n    @property({ \n        visible: true, \n        serializable: true,\n        tooltip: 'Padding value for the top side of the UI element'\n    })\n    private _top: number = 0;\n\n    /**\n     * Creates a new Paddings instance.\n     */\n    constructor() {\n        this.left = 0;\n        this.right = 0;\n        this.top = 0;\n        this.bottom = 0;\n    }\n\n    /**\n     * Gets the left padding value.\n     * @returns The left padding value\n     */\n    public get left(): number {\n        return this._left;\n    }\n\n    /**\n     * Sets the left padding value.\n     * @param value The new left padding value\n     */\n    public set left(value: number) {\n        this._left = value;\n    }\n    \n    /**\n     * Gets the right padding value.\n     * @returns The right padding value\n     */\n    public get right(): number {\n        return this._right;\n    }\n    /**\n     * Sets the right padding value.\n     * @param value The new right padding value\n     */\n    public set right(value: number) {\n        this._right = value;\n    }\n    \n    /**\n     * Gets the top padding value.\n     * @returns The top padding value\n     */\n    public get top(): number {\n        return this._top;\n    }\n    /**\n     * Sets the top padding value.\n     * @param value The new top padding value\n     */\n    public set top(value: number) {\n        this._top = value;\n    }\n    \n    /**\n     * Gets the bottom padding value.\n     * @returns The bottom padding value\n     */\n    public get bottom(): number {\n        return this._bottom;\n    }\n    /**\n     * Sets the bottom padding value.\n     * @param value The new bottom padding value\n     */\n    public set bottom(value: number) {\n        this._bottom = value;\n    }\n\n    /**\n     * Creates a copy of the current Paddings instance.\n     * @returns A new Paddings instance with the same values\n     */\n    public clone(): Paddings {\n        const paddings = new Paddings();\n        paddings.left = this.left;\n        paddings.right = this.right;\n        paddings.top = this.top;\n        paddings.bottom = this.bottom;\n        return paddings;\n    }\n}","import { GameTool } from \"../Game/EnumGameTool\";\nimport { singleton } from \"../Libs/Injects/decorators/singleton\";\nimport { IPlayerInventoryObserver } from \"./Interfaces/IPlayerInventoryObserver\";\nimport { IPlayerInventoryService } from \"./Interfaces/IPlayerInventoryService\";\n\n/**\n * Service that manages the player's inventory of tools and items.\n * This service tracks the quantities of different tools the player has,\n * handles tool usage, and notifies observers of inventory changes.\n */\n@singleton()\nexport class PlayerInventoryService implements IPlayerInventoryService {\n    /** Map storing the quantity of each tool type */\n    private readonly _items: Map<GameTool, number> = new Map();\n    /** Set of observers to notify of inventory changes */\n    private readonly _observers: Set<IPlayerInventoryObserver> = new Set();\n\n    constructor() {\n        this._items.set(GameTool.BOMB_1, 10);\n        this._items.set(GameTool.BOMB_2, 5);\n    }\n\n    /**\n     * Adds an observer to be notified of inventory changes.\n     * @param observer The observer to add\n     */\n    public addObserver(observer: IPlayerInventoryObserver): void {\n        this._observers.add(observer);\n        this._items.forEach((amount, tool) => {\n            observer.onInventoryChanged(tool, amount);\n        });\n    }\n\n    /**\n     * Removes an observer from the notification list.\n     * @param observer The observer to remove\n     */\n    public removeObserver(observer: IPlayerInventoryObserver): void {\n        this._observers.delete(observer);\n    }\n\n    /**\n     * Gets the amount of a specific tool in the inventory.\n     * @param tool The tool to check\n     * @returns The quantity of the tool\n     */\n    public getAmount(tool: GameTool): number {\n        return this._items.get(tool) || 0;\n    }\n\n    /**\n     * Sets the amount of a specific tool in the inventory.\n     * @param tool The tool to set\n     * @param amount The new amount\n     */\n    public setAmount(tool: GameTool, amount: number): void {\n        this._items.set(tool, amount);\n        this.notifyObservers(tool, amount);\n    }\n\n    /**\n     * Adds a specified amount of a tool to the inventory.\n     * @param tool The tool to add\n     * @param amount The amount to add\n     */\n    public addAmount(tool: GameTool, amount: number): void {\n        const currentAmount = this.getAmount(tool);\n        this.setAmount(tool, currentAmount + amount);\n    }\n\n    /**\n     * Removes a specified amount of a tool from the inventory.\n     * @param tool The tool to remove\n     * @param amount The amount to remove\n     * @returns True if the removal was successful, false if not enough tools\n     */\n    public removeAmount(tool: GameTool, amount: number): boolean {\n        const currentAmount = this.getAmount(tool);\n        if (currentAmount >= amount) {\n            this.setAmount(tool, currentAmount - amount);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Notifies all observers that a tool's amount has changed.\n     * @param tool The tool that changed\n     * @param amount The new amount\n     */\n    private notifyObservers(tool: GameTool, amount: number): void {\n        this._observers.forEach(observer => {\n            observer.onInventoryChanged(tool, amount);\n        });\n    }\n}","/**\n * @file Row1RocketActivated.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-05\n */\n\nimport { GameFieldItem } from \"../../../../GameField/GameFieldItem\";\nimport { BaseState } from \"../../../../Libs/StateMachine/BaseState\";\nimport { GameContext } from \"../../GameContext\";\n\n/**\n * Represents the state when a single-row rocket booster is activated.\n * This booster clears all items in a single row of the game field.\n */\nexport class Row1RocketActivated extends BaseState<GameContext> {\n    public static readonly STATE_NAME: string = 'Row1RocketActivated';\n\n    constructor() {\n        super(Row1RocketActivated.STATE_NAME);\n    }\n\n    /**\n     * Handles entering the row rocket activation state.\n     * Collects all items in the selected row for removal.\n     * @param context - The game context\n     */\n    public async onEnter(context: GameContext): Promise<void> {\n        const items = context.items;\n        const cluster: GameFieldItem[] = [];\n        \n        const selectedRow = context.selectedItem.position.y;\n        for (let i = 0; i < items.length; i++) {\n            if (items[i][selectedRow]) {\n                cluster.push(items[i][selectedRow]);\n            }\n        }\n        \n        context.currentCluster = cluster;\n    }\n}   ","/**\n * @file Row2RocketActivated.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-05\n */\n\nimport { GameFieldItem } from \"../../../../GameField/GameFieldItem\";\nimport { BaseState } from \"../../../../Libs/StateMachine/BaseState\";\nimport { GameContext } from \"../../GameContext\";\n\n/**\n * Represents the state when a double-row rocket booster is activated.\n * This booster clears all items in two adjacent rows of the game field.\n */\nexport class Row2RocketActivated extends BaseState<GameContext> {\n    public static readonly STATE_NAME: string = 'Row2RocketActivated';\n\n    constructor() {\n        super(Row2RocketActivated.STATE_NAME);\n    }\n\n    /**\n     * Handles entering the double-row rocket activation state.\n     * Collects all items in the selected row and an adjacent row for removal.\n     * @param context - The game context\n     */\n    public async onEnter(context: GameContext): Promise<void> {\n        const items = context.items;\n        const cluster: GameFieldItem[] = [];\n\n        const selectedRow = context.selectedItem.position.y;\n        \n        for (let i = 0; i < items.length; i++) {\n            for (let j = Math.max(0, selectedRow - 1); j <= Math.min(selectedRow + 1, items[i].length - 1); j++) {\n                if (items[i][j]) {\n                    cluster.push(items[i][j]);\n                }\n            }\n        }\n\n        context.currentCluster = cluster;\n    }\n}   ","/**\n * @file SelectedItemData.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-05\n */\n\nimport { Vec2 } from \"cc\";\nimport { ISelectedItemData } from \"./ISelectedItemData\";\nimport { GameFieldItem } from \"../../GameField/GameFieldItem\";\n\n/**\n * Represents data about a selected item in the game field.\n * This class encapsulates information about an item that has been selected\n * by the player, including its position and properties.\n */\nexport class SelectedItemData implements ISelectedItemData {\n    /** Event name for when an item is selected */\n    public static readonly SELECTED_EVENT: string = 'game-item-selected';\n\n    /** The position of the selected item in the grid */\n    private _position: Vec2 = null;\n    /** Reference to the actual game field item */\n    private _item: GameFieldItem = null;\n    \n    /**\n     * Gets the position of the selected item.\n     */\n    public get position(): Vec2 {\n        return this._position;\n    }\n\n    /**\n     * Sets the position of the selected item.\n     */\n    public set position(value: Vec2) {\n        this._position = value;\n    }\n\n    /**\n     * Gets the game field item reference.\n     */\n    public get item(): GameFieldItem {\n        return this._item;\n    }\n\n    /**\n     * Sets the game field item reference.\n     */\n    public set item(value: GameFieldItem) {\n        this._item = value;\n    }\n}","/**\n * @file singleton.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-02\n */\n\nimport {injectable} from \"./injectable\";\nimport {classMap} from \"../dependency-injection\";\nimport {Constructor} from \"../type/Type\";\n\n/**\n * Class decorator factory that registers the class as a singleton within\n * the global container.\n *\n * @return {Function} The class decorator\n */\nexport function singleton<T>(): (target: Constructor<T>) => void {\n    return function (target: Constructor<T>): void {\n        injectable()(target);\n        classMap.get(target).asSingleton();\n    };\n}\n","import { tween, Tween } from \"cc\";\n\ninterface IAssociativeArray<T> {\n    [key: string]: T;\n}\n\nexport class TimeoutUtils {\n\n    protected static lastId: number = 0;\n    protected static maxInteger: number;\n    private static readonly timers: IAssociativeArray<Tween<any>> = {};\n\n    static wait(timeOut: number): Promise<void> {\n        return new Promise(resolve => {\n            TimeoutUtils.setTimeout(() => {\n                resolve();\n            }, timeOut);\n        });\n    }\n\n    static setTimeout(handler: (...args: any[]) => void, timeout: number, ...args: any[]): number {\n        const id = this.getId();\n        const move = tween({time: 0}).by(timeout / 1000, {time: 100});\n        const checkEnd = tween().call(() => {\n            handler(args);\n        });\n\n        move\n            .then(checkEnd)\n            .start();\n\n        this.timers[id] = move;\n        return id;\n    }\n\n    static isActive(id: number): boolean {\n        return this.timers[id] !== undefined;\n    }\n\n    static clearTimeout(id: number): void {\n        this.clearById(id);\n    }\n\n    static setInterval(handler: Function, timeout: number, ...args: any[]): number {\n        const id = this.getId();\n        const move = this.getIntervalTween(timeout, handler, id, args);\n\n        this.timers[id] = move;\n        return id;\n    }\n\n    static clearInterval(id: number): void {\n        this.clearById(id);\n    }\n\n    protected static clearById(id: number) {\n        if (isNaN(id)) {\n            console.warn(`TimeoutUtils: check timeout/interval id. id = ${id}`);\n            return;\n        }\n        const tl = this.timers[id];\n        if (tl) {\n            tl.stop();\n            delete this.timers[id];\n        }\n    }\n\n    protected static getId() {\n        // (Number as any) is used to prevent failing of compiler,\n        // take into account, that is Number.MAX_SAFE_INTEGER returns undefined,\n        // and the next Math.pow result will be taken\n        this.maxInteger = this.maxInteger || (Number as any).MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n        if (this.lastId >= this.maxInteger - 1) {\n            this.lastId = 0;\n        }\n        return ++this.lastId;\n    }\n\n    private static getIntervalTween(timeout: number, handler: Function, timerId:number, args: any[], ) {\n        const move = tween({time: 0}).by(timeout / 1000, {time: 100});\n        const checkEnd = tween().call(() => {\n            handler(args);\n            if (this.timers[timerId]) {\n                TimeoutUtils.getIntervalTween(timeout, handler, timerId, args);\n                this.timers[timerId] = move;\n            }\n        });\n\n        move\n            .then(checkEnd)\n            .start();\n        return move;\n    }\n}\n","/**\n * @file ToolController.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-06\n */\n\nimport { _decorator, Component } from 'cc';\nimport { GameContext } from '../Game/GameSM/GameContext';\nimport { inject } from '../Libs/Injects/inject';\nimport { GameTool } from '../Game/EnumGameTool';\nconst { ccclass } = _decorator;\n\n/**\n * Component responsible for managing tool selection and control in the game.\n * This class handles the interaction between UI tool buttons and the game context,\n * managing tool selection, deselection, and tool-specific actions.\n */\n@ccclass('ToolController')\nexport class ToolController extends Component {\n    /** Reference to the game context for tool state management */\n    private readonly _gameContext: GameContext = inject(GameContext);\n    \n    /**\n     * Handles the click event for the regular bomb tool.\n     * Selects or deselects the bomb tool based on current state.\n     */\n    public onBombClick(): void {\n        this._gameContext.currentTool = \n        this._gameContext.currentTool == GameTool.BOMB_1 ? GameTool.SELECTOR : GameTool.BOMB_1;\n    }\n\n    /**\n     * Handles the click event for the big bomb tool.\n     * Selects or deselects the big bomb tool based on current state.\n     */\n    public onBigBombClick(): void {\n        this._gameContext.currentTool = \n        this._gameContext.currentTool == GameTool.BOMB_2 ? GameTool.SELECTOR : GameTool.BOMB_2;\n    }\n}","/**\n * @file ToolSelector.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-06\n */\n\nimport { _decorator, Component, Node } from 'cc';\nimport { GameContext } from '../Game/GameSM/GameContext';\nimport { inject } from '../Libs/Injects/inject';\nimport { GameTool } from '../Game/EnumGameTool';\nimport { PlayerInventoryService } from '../Services/PlayerInventoryService';\nimport { IPlayerInventoryObserver } from '../Services/Interfaces/IPlayerInventoryObserver';\nimport { ToolToggleButton } from './ToolToggleButton';\nimport { IGameToolObserver } from '../Game/GameSM/States/Observers/IGameToolObserver';\nconst { ccclass, property } = _decorator;\n\n/**\n * Component that manages the tool selection interface.\n * This component handles the selection and switching between different game tools,\n * maintaining the current tool state and notifying observers of changes.\n */\n@ccclass('ToolSelector')\nexport class ToolSelector extends Component implements IPlayerInventoryObserver, IGameToolObserver {\n    private _inventory: PlayerInventoryService = inject(PlayerInventoryService);\n    \n    @property({ type: ToolToggleButton, tooltip: 'Bomb button', visible: true })\n    private _bombToggle: ToolToggleButton | null = null;\n    \n    @property({ type: ToolToggleButton, tooltip: 'Big bomb button', visible: true })\n    private _bigBombToggle: ToolToggleButton | null = null;\n\n    /**\n     * Called when the component starts.\n     * Initializes the tool selector and sets up observers.\n     */\n    start() {\n        this._inventory.addObserver(this);   \n    }\n\n    /**\n     * Called when the player's inventory changes.\n     * Updates the tool toggle buttons to reflect the new inventory state.\n     * @param tool The tool that changed in the inventory\n     * @param amount The new amount of the tool in the inventory\n     */\n    onInventoryChanged(tool: GameTool, amount: number): void {\n        if (tool === GameTool.BOMB_1) {\n            this._bombToggle.setText(`${amount}`);\n        }\n\n        if (tool === GameTool.BOMB_2) {\n            this._bigBombToggle.setText(`${amount}`);\n        }\n    }\n\n    /**\n     * Called when the bomb toggle button is toggled.\n     * Checks if there are enough bombs in the inventory and updates the toggle state accordingly.\n     */\n    public onBombToggled() {\n        if (this._inventory.getAmount(GameTool.BOMB_1) <= 0) {\n            console.error('Not enough bombs');\n            this._bombToggle.isOn = false;\n            return;\n        }\n    }\n\n    /**\n     * Called when the big bomb toggle button is toggled.\n     * Checks if there are enough bombs in the inventory and updates the toggle state accordingly.\n     */\n    public onBigBombToggled() {\n        if (this._inventory.getAmount(GameTool.BOMB_1) <= 0) {\n            console.error('Not enough bombs');\n            this._bombToggle.isOn = false;\n            return;\n        }\n    }\n\n    /**\n     * Called when the tool changes in the game context.\n     * Updates the toggle buttons to reflect the new tool state.\n     * @param newTool The newly selected tool\n     */\n    onToolChanged(newTool: GameTool): void {\n        this._bombToggle.isOn = newTool == GameTool.BOMB_1;\n        this._bigBombToggle.isOn = newTool == GameTool.BOMB_2;\n    }\n}\n","/**\n * @file ToolSwitcherButton.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-05\n */\n\nimport { GameTool } from \"../Game/EnumGameTool\";\nimport { GameContext } from \"../Game/GameSM/GameContext\";\nimport { IGameToolObserver } from \"../Game/GameSM/States/Observers/IGameToolObserver\";\nimport { inject } from \"../Libs/Injects/inject\";\nimport { ToolToggleButton } from \"./ToolToggleButton\";\nimport { _decorator } from 'cc';\nconst { ccclass } = _decorator;\n\n/**\n * Component that manages a button for switching between different game tools.\n * This component handles the display and interaction of tool selection buttons,\n * including updating counts and handling click events.\n */\n@ccclass('ToolSwitcherButton')\nexport class ToolSwitcherButton extends ToolToggleButton implements IGameToolObserver {\n\n    /**\n     * The game context associated with this button.\n     */\n    private _context: GameContext = inject(GameContext);\n    \n    /**\n     * Called when the component starts.\n     * Initializes the button and sets up game context observer.\n     */\n    protected onLoad(): void {\n        super.onLoad();\n        this._context.addToolObserver(this);\n    }\n\n    /**\n     * Called when the tool changes in the game context.\n     * @param newTool The newly selected tool\n     */\n    onToolChanged(newTool: GameTool): void {\n        this.isOn = newTool == this.toggleValue();\n    }\n\n    /**\n     * Returns the tool type associated with this button.\n     * @returns The tool type\n     */\n    public toggleValue(): GameTool{\n        throw new Error('Method not implemented.');\n    };\n}","/**\n * @file ToolToggleButton.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-06\n */\n\nimport { _decorator, Component, Node, Sprite, EventHandler, Label, CCBoolean, Enum,  } from 'cc';\nimport { GameTool } from '../Game/EnumGameTool';\nimport { GameContext } from '../Game/GameSM/GameContext';\nimport { inject } from '../Libs/Injects/inject';\nimport { IGameToolObserver } from '../Game/GameSM/States/Observers/IGameToolObserver';\nimport { IPlayerInventoryObserver } from '../Services/Interfaces/IPlayerInventoryObserver';\nimport { PlayerInventoryService } from '../Services/PlayerInventoryService';\nimport { IPlayerInventoryService } from '../Services/Interfaces/IPlayerInventoryService';\nconst { ccclass, property } = _decorator;\n\n/**\n * A toggle button component for switching between different game tools.\n * This component provides functionality for displaying the current tool state,\n * handling toggle events, and notifying observers of state changes.\n */\n@ccclass('ToggleButton')\nexport class ToolToggleButton extends Component implements IGameToolObserver, IPlayerInventoryObserver {\n\n    private _gameContext: GameContext = inject(GameContext);\n    private _playerInventory: IPlayerInventoryService = inject(PlayerInventoryService);\n\n    /**\n     * The sprite to display when the toggle is ON.\n     */\n    @property({\n        type: Sprite,\n        tooltip: 'Sprite to display when the toggle is in ON state'\n    })\n    private onSprite: Sprite | null = null;\n\n    /**\n     * The sprite to display when the toggle is OFF.\n     */\n    @property({\n        type: Sprite,\n        tooltip: 'Sprite to display when the toggle is in OFF state'\n    })\n    private offSprite: Sprite | null = null;\n\n    /**\n     * The current state of the toggle.\n     */\n    @property({\n        type: CCBoolean,\n        tooltip: 'Current state of the toggle button (ON/OFF)'\n    })\n    private _isOn: boolean = false;\n\n    /**\n     * Whether the toggle is enabled or disabled.\n     */\n    @property({\n        type: CCBoolean,\n        tooltip: 'Whether the toggle button is enabled and can be interacted with'\n    })\n    private _isEnabled: boolean = true;\n\n    /**\n     * The text field to display the amount of boosters.\n     */\n    @property({\n        type: Label,\n        tooltip: 'Label component for displaying the amount of available tools'\n    })\n    private label: Label | null = null;\n    \n    /**\n     * The tool associated with the toggle.\n     */\n    @property({\n        tooltip: 'The type of tool this button controls',\n        visible:true\n    })\n    private _tool: string = '';\n    \n    /**\n     * Event triggered when the toggle state changes.\n     */\n    @property({\n        type: [EventHandler],\n        tooltip: 'Event handlers to be called when the toggle state changes'\n    })\n    public onToggleChanged: EventHandler[] = [];\n\n\n    /**\n     * Event triggered when the button is enabled or disabled.\n     */\n    @property({\n        type: [EventHandler],\n        tooltip: 'Event handlers to be called when the enabled state changes'\n    })\n    public onEnabledChanged: EventHandler[] = [];\n\n\n    /**\n     * Sets the text displayed on the button.\n     * @param text The text to display\n     */\n    public setText(text: string): void {\n        if (this.label) {\n            this.label.string = text;\n        }\n    }\n\n    /**\n     * Called when the game tool changes.\n     * Updates the toggle state based on the new tool.\n     * @param newTool The new game tool\n     */\n    public onToolChanged(newTool: GameTool): void {\n        this._isOn = newTool == this._tool;\n        this.updateVisuals();\n    }\n    \n    /**\n     * Gets the current toggle state.\n     * @returns True if the button is toggled on, false otherwise\n     */\n    public get isOn(): boolean {\n        return this._isOn;\n    }\n\n    /**\n     * Sets the toggle state of the button.\n     * @param value The new toggle state\n     */\n    public set isOn(value: boolean) {\n        if (this._isOn !== value && this._isEnabled) {\n            this._isOn = value;\n            this.updateVisuals();\n            this.notifyToggleObservers();\n        }\n    }\n\n    /**\n     * Gets whether the toggle is enabled or disabled.\n     * @returns True if the button is enabled, false otherwise\n     */\n    public get isEnabled(): boolean {\n        return this._isEnabled;\n    }\n\n    /**\n     * Called when the component loads.\n     * Initializes the toggle button and sets up event listeners.\n     */\n    protected onLoad(): void {\n        this._gameContext.addToolObserver(this);\n        this._playerInventory.addObserver(this);\n        this.node.on(Node.EventType.TOUCH_END, this.onTouchEnd, this);\n        this.updateVisuals();\n    }\n\n    /**\n     * Called when the component is destroyed.\n     * Removes event listeners and cleans up resources.\n     */\n    protected onDestroy(): void {\n        this._gameContext.removeToolObserver(this);\n        this.node.off(Node.EventType.TOUCH_END, this.onTouchEnd, this);\n    }\n\n    /**\n     * Called when the button is touched.\n     * Toggles the button state if it is enabled.\n     */\n    private onTouchEnd(): void {\n        if (this._isEnabled) {\n            this.toggle();\n        }\n    }\n\n    /**\n     * Toggles the button state.\n     */\n    private toggle(): void {\n        this.isOn = !this._isOn;\n    }\n\n    /**\n     * Updates the visual state of the button based on the current toggle state.\n     */\n    private updateVisuals(): void {\n        if (this.onSprite && this.offSprite) {\n            this.onSprite.node.active = this._isOn && this._isEnabled;\n            this.offSprite.node.active = !this._isOn && this._isEnabled;\n        }\n    }\n\n    /**\n     * Notifies observers of a toggle state change.\n     */\n    private notifyToggleObservers(): void {\n        EventHandler.emitEvents(this.onToggleChanged, this, this._isOn);\n    }\n\n    /**\n     * Called when the player's inventory changes.\n     * Updates the button text if the changed tool matches the button's tool.\n     * @param tool The changed tool\n     * @param amount The new amount of the tool\n     */\n    onInventoryChanged(tool: GameTool, amount: number): void {\n        if (tool == this._tool) {\n            this.setText(amount.toString());\n        }\n    }\n}\n","/**\n * @file Type.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-02\n */\n\nexport type DynamicObject = Partial<Dynamic>;\n\nexport interface Dynamic {\n    [key: string]: any;\n}\n\n//TODO: try to exclude constructor from abstract class generic\nexport type Abstract<T> = Exclude<Function & { prototype: T }, Constructor<T>>;\n// export type Abstract<T> = Function & { prototype: T };\nexport type Constructor<T = any> = new (...args: any[]) => T;\nexport type Class<T> = Abstract<T> | Constructor<T>;\n","/**\n * @file UIService.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-05\n */\n\nimport { _decorator, Node, Prefab, UITransform, Vec3 } from \"cc\";\nimport { injectable } from \"../Libs/Injects/decorators/injectable\";\nimport { inject } from \"../Libs/Injects/inject\";\nimport { ILevelConfigurationService } from \"./Interfaces/ILevelConfiguration\";\nimport { IUIService } from \"./Interfaces/IUIService\";\nimport { LevelConfigurationService } from \"./LevelConfiguration\";\nimport { Paddings } from \"../UI/Paddings\";\nconst { ccclass, property } = _decorator;\n\n/**\n * Service responsible for managing UI elements and interactions.\n * This service handles the creation, display, and management of UI components\n * such as windows, popups, and other interface elements.\n */\n@injectable()\n@ccclass('UIService')\nexport class UIService implements IUIService {\n    private lvlConf: ILevelConfigurationService = inject(LevelConfigurationService);\n\n    /**\n     * Resets the size of the given UI elements based on the level configuration and paddings.\n     * @param scaleTargets The UI elements to reset the size for\n     * @param paddings The paddings to apply to the UI elements\n     */\n    public async resetSize(scaleTargets: Node[], paddings: Paddings | null): Promise<void> {\n        if (!scaleTargets || scaleTargets.length === 0) return;\n\n        const conf = this.lvlConf;\n        const pixelWidth = conf.width * conf.cellWidth;\n        const pixelHeight = conf.height * conf.cellHeight;\n\n        if (paddings == null) {\n            paddings = new Paddings();\n        }\n\n        for (let i = 0; i < scaleTargets.length; i++) {\n            const target = scaleTargets[i];\n            const targetTransform = target.getComponent(UITransform);\n            if (targetTransform == null) continue;\n            \n            const totalWidth = pixelWidth + (paddings ? paddings.right + paddings.left : 0);\n            const totalHeight = pixelHeight + (paddings ? paddings.top + paddings.bottom : 0);\n\n            targetTransform.setContentSize(totalWidth, totalHeight);\n        }\n    }\n}","/**\n * @file UniqueUtils.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-02\n */\n\nexport class UniqueUtils {\n\n    protected static UNIQUE_ID_PROP_NAME: string = \"UniqueId\";\n    protected static globalUniqueId: number = 0;\n    protected static prevGlobalUniqueId: number = 0;\n\n    public static getObjectUniqueId(object: object): string {\n        if (!object.hasOwnProperty(UniqueUtils.UNIQUE_ID_PROP_NAME)) {\n            UniqueUtils.prevGlobalUniqueId = UniqueUtils.globalUniqueId;\n\n            UniqueUtils.globalUniqueId++;\n            // An additional checking in case max number value limit is reached\n            if (UniqueUtils.globalUniqueId === UniqueUtils.prevGlobalUniqueId) {\n                UniqueUtils.globalUniqueId = 0;\n            }\n            (object as any)[UniqueUtils.UNIQUE_ID_PROP_NAME] = UniqueUtils.globalUniqueId.toString();\n        }\n\n        return (object as any)[UniqueUtils.UNIQUE_ID_PROP_NAME];\n    }\n}\n","/**\n * @file UserHud.ts\n * @author Anton Lapshin <anton@lapshin.dev>\n * @created 2024-12-06\n */\n\nimport { _decorator, Component, Label, ProgressBar, Node } from 'cc';\nimport { GameContext } from '../Game/GameSM/GameContext';\nimport { inject } from '../Libs/Injects/inject';\nimport { IGameStatsObserver } from '../Game/GameSM/States/Observers/IGameStatsObserver';\nimport { LevelConfigurationService } from '../Services/LevelConfiguration';\nimport { GameStateMachine } from '../Game/GameSM/GameSM';\nimport { IGameStateObserver } from '../Game/GameSM/States/Observers/IGameStateObserver';\nconst { ccclass, property } = _decorator;\n\n/**\n * Component that manages the game's heads-up display (HUD).\n * This component displays and updates game information such as score,\n * remaining moves, progress bars, and game over states.\n */\n@ccclass('UserHud')\n/**\n * UserHud class is responsible for managing the game's heads-up display (HUD).\n * It displays and updates game information such as score, remaining moves, \n * progress bars, and game over states.\n */\nexport class UserHud extends Component implements IGameStatsObserver, IGameStateObserver {\n    /** Label displaying the current score */\n    @property({\n        type: Label,\n        tooltip: 'Label component for displaying the current game score'\n    })\n    private scoreLabel: Label | null = null;\n\n    /** Label displaying remaining moves */\n    @property({\n        type: Label,\n        tooltip: 'Label component for displaying the remaining moves'\n    })\n    private movesLabel: Label | null = null;\n\n    /** Progress bar showing score progress */\n    @property({\n        type: ProgressBar,\n        tooltip: 'Progress bar component showing progress towards target score'\n    })\n    private scoreProgress: ProgressBar | null = null;\n\n    /** Window shown when game is over */\n    @property({\n        type: Node,\n        tooltip: 'Node containing the game over window UI'\n    })\n    private gameOverWindow: Node | null = null;\n\n    /** Reference to the game context */\n    private readonly _context: GameContext = inject(GameContext);\n    /** Reference to the level configuration */\n    private readonly _lvlConf: LevelConfigurationService = inject(LevelConfigurationService);\n    /** Reference to the game state machine */\n    private readonly _stateMachine: GameStateMachine = inject(GameStateMachine);\n\n    /**\n     * Called when the component starts.\n     * Initializes the HUD and sets up observers.\n     */\n    start() {\n        this._context.addObserver(this);\n        this._stateMachine.addStateObserver(this);\n        this.updateScore(0);\n        this.updateMoves(0);\n        if (this.gameOverWindow) {\n            this.gameOverWindow.active = false;\n        }\n    }\n\n    /**\n     * Updates the score display.\n     * @param score The new score value\n     */\n    private updateScore(score: number): void {\n        if (this.scoreLabel) {\n            this.scoreLabel.string = score.toString();\n        }\n        if (this.scoreProgress) {\n            this.scoreProgress.progress = score / this._lvlConf.targetScore;\n        }\n    }\n\n    /**\n     * Updates the moves display.\n     * @param moves The new moves value\n     */\n    private updateMoves(moves: number): void {\n        if (this.movesLabel) {\n            this.movesLabel.string = `${moves}/${this._lvlConf.maxMoves}`;\n        }\n    }\n\n    /**\n     * Called when the game score changes.\n     * @param newScore The new score value\n     */\n    onScoreChanged(newScore: number): void {\n        this.updateScore(newScore);\n    }\n\n    /**\n     * Called when the number of moves changes.\n     * @param newMoves The new moves value\n     */\n    onMovesChanged(newMoves: number): void {\n        this.updateMoves(newMoves);\n    }\n\n    /**\n     * Called when the game state changes.\n     * Shows the game over window when appropriate.\n     * @param newState The new game state\n     */\n    onStateChanged(newState: string): void {\n        if (newState === 'GameOver' && this.gameOverWindow) {\n            this.gameOverWindow.active = true;\n        }\n    }\n}\n"]}